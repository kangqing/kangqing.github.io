<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MY WORLD</title>
  
  <subtitle>贩卖快乐！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yunqing.xyz/"/>
  <updated>2020-03-24T13:41:26.001Z</updated>
  <id>http://www.yunqing.xyz/</id>
  
  <author>
    <name>云晴</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql必知必会读书笔记（3）</title>
    <link href="http://www.yunqing.xyz/article/970ccb5d.html"/>
    <id>http://www.yunqing.xyz/article/970ccb5d.html</id>
    <published>2020-03-23T12:39:52.000Z</published>
    <updated>2020-03-24T13:41:26.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="21-创建和操纵表"><a href="#21-创建和操纵表" class="headerlink" title="21.创建和操纵表"></a>21.创建和操纵表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;t_class&#96; </span><br><span class="line">(</span><br><span class="line">&#96;id&#96; INT NOT NULL Auto_Increment, </span><br><span class="line">&#96;name&#96; VARCHAR ( 20 ) NOT NULL, </span><br><span class="line">PRIMARY KEY ( &#96;id&#96; ) </span><br><span class="line">) ENGINE &#x3D; INNODB;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>创建表的时候，指定的表名必须不存在，否则将出错。如果要防止意外覆盖已有表，mysql要求先手动删除该表，然后再重建他，而不是用简单的创建表语句覆盖它。<br>如果你仅仅想在一个表不存在时创建他，应该在表名后给出<code>IF NOT EXISTS</code></p></blockquote><h3 id="理解NULL值"><a href="#理解NULL值" class="headerlink" title="理解NULL值"></a>理解NULL值</h3><blockquote><p>NULL值是没有值，不是空字符串<code>&#39;&#39;</code>,空字符串代表有值，空字符串会被NOT NULL接收。</p></blockquote><h3 id="自增主键"><a href="#自增主键" class="headerlink" title="自增主键"></a>自增主键</h3><blockquote><p>①AUTO_INCREMENT 每个表只允许一个自增列，而且他必须被索引（如，通过使它成为主键）<br>②如果一个列被指定为自增，那么他需要特殊的值吗？你可以在insert语句中指定任意一个值，只要他是唯一的且至今未被使用过的即可，该值将被用于代替自动生成的值。后续的增量将开始使用该收工插入的值。<br>③如何在插入之后获取自增的值呢？<code>select last_insert_id()</code>函数将获取最后一个自增的值。</p></blockquote><h3 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h3><blockquote><p>为了更新表定义，可以使用<code>ALTER  TABLE</code>语句。但是理想的状态下，当表中存储数据以后，该表就不应该再被更新定义，在表的设计过程中需要花费大量时间来考虑，一边后期不对该表进行大的更改。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 给表添加一个列</span><br><span class="line">ALTER TABLE &#96;t_class&#96; ADD &#96;create_time&#96; datetime;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除刚才添加的列</span><br><span class="line">ALTER TABLE &#96;t_class&#96; DROP COLUMN &#96;create_time&#96;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 给&#96;name&#96;列添加一个索引</span><br><span class="line">ALTER TABLE &#96;t_class&#96; ADD INDEX index_name ( &#96;name&#96; );</span><br></pre></td></tr></table></figure><blockquote><p>注意小心使用ALTER TABLE,应该在进行改动前进行完整的备份，数据库表的更改不能插销，如果增加了不必要的列，可能不能删除他们，相应的如果删除了不应该删除的列，可能会丢失该列的全部数据。</p></blockquote><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE   &#96;表名&#96;;</span><br></pre></td></tr></table></figure><h3 id="重命名表-多个表用逗号隔开"><a href="#重命名表-多个表用逗号隔开" class="headerlink" title="重命名表(多个表用逗号隔开)"></a>重命名表(多个表用逗号隔开)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE &#96;t_class&#96; TO &#96;my_class&#96;;</span><br></pre></td></tr></table></figure><h2 id="22-使用视图"><a href="#22-使用视图" class="headerlink" title="22.使用视图"></a>22.使用视图</h2><h3 id="理解视图"><a href="#理解视图" class="headerlink" title="理解视图"></a>理解视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 首先来看一个sql,查询学生，班级名称，成绩等字段</span><br><span class="line">SELECT</span><br><span class="line">t1.name,</span><br><span class="line">t1.score,</span><br><span class="line">t2.name className</span><br><span class="line"></span><br><span class="line">FROM</span><br><span class="line">student t1</span><br><span class="line">LEFT JOIN t_class t2 ON t1.class_id &#x3D; t2.id;</span><br></pre></td></tr></table></figure><blockquote><p>现在把整个查询包装成一个名为studentclass的虚拟表，则可以如下轻松的检索出相同的数据.<br>这就是视图的作用，studentclass是一个视图，作为视图它不包含表中应该有的任何列或数据，它包含的是一个SQL查询。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name, score, className from studentclass;</span><br></pre></td></tr></table></figure><h3 id="为什么使用视图？"><a href="#为什么使用视图？" class="headerlink" title="为什么使用视图？"></a>为什么使用视图？</h3><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-0.png" alt="图片"></p><h3 id="视图的规则和限制"><a href="#视图的规则和限制" class="headerlink" title="视图的规则和限制"></a>视图的规则和限制</h3><blockquote><p>①与表一样，视图必须唯一命名，不能跟已有的表或视图重名。<br>②对于可以创建的视图的数量没有限制。<br>③为了创建视图必须具有足够的权限。<br>④视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。<br>⑤order by可以用在视图中，但是如果从该视图检索数据select语句中也有order by，会覆盖视图中的order by<br>⑥视图不能索引，也不能有关联的触发器或默认值。<br>⑦视图可以和表一起使用，例如编写一条联结表和视图的select 语句。</p></blockquote><h3 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h3><blockquote><p>①视图用<code>create view</code>语句来创建<br>②使用<code>show create view viewname;</code> 来查看创建视图的语句；<br>③用<code>drop</code>删除视图，可以先drop 再create,也可以直接使用<code>create or replace view</code>,如果更新的视图不存在则创建一个，存在则替换原来的视图。</p></blockquote><h3 id="利用视图简化复杂的联结"><a href="#利用视图简化复杂的联结" class="headerlink" title="利用视图简化复杂的联结"></a>利用视图简化复杂的联结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 例如，本章开始理解视图的那个sql可以如下，创建或更新视图studentclass</span><br><span class="line">CREATE </span><br><span class="line">OR REPLACE VIEW studentclass AS SELECT</span><br><span class="line">t1.&#96;name&#96;,</span><br><span class="line">t1.score,</span><br><span class="line">t2.&#96;name&#96; className </span><br><span class="line">FROM</span><br><span class="line">student t1</span><br><span class="line">LEFT JOIN t_class t2 ON t1.class_id &#x3D; t2.id;</span><br><span class="line"></span><br><span class="line">-- 然后从创建的视图中查询结果</span><br><span class="line">SELECT</span><br><span class="line">&#96;name&#96;,</span><br><span class="line">score,</span><br><span class="line">className </span><br><span class="line">FROM</span><br><span class="line">studentclass;</span><br></pre></td></tr></table></figure><h3 id="用视图重新格式化检索出的数据"><a href="#用视图重新格式化检索出的数据" class="headerlink" title="用视图重新格式化检索出的数据"></a>用视图重新格式化检索出的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 例如我们需要得到&#96;姓名-班级名-分数&#96;这样格式的数据，可以如下实现</span><br><span class="line">SELECT</span><br><span class="line">CONCAT( t1.&#96;name&#96;, &#39;-&#39;, t2.&#96;name&#96;, &#39;-&#39;, t1.score ) AS &#96;data&#96; </span><br><span class="line">FROM</span><br><span class="line">student t1</span><br><span class="line">LEFT JOIN t_class t2 ON t1.class_id &#x3D; t2.id;</span><br><span class="line"></span><br><span class="line">-- 假如我们经常需要这个格式的结果，则可以创建一个视图，需要的时候使用它即可。</span><br><span class="line">CREATE </span><br><span class="line">OR REPLACE VIEW &#96;my_format&#96; AS SELECT</span><br><span class="line">CONCAT( t1.&#96;name&#96;, &#39;-&#39;, t2.&#96;name&#96;, &#39;-&#39;, t1.score ) AS &#96;data&#96; </span><br><span class="line">FROM</span><br><span class="line">student t1</span><br><span class="line">LEFT JOIN t_class t2 ON t1.class_id &#x3D; t2.id;</span><br><span class="line"></span><br><span class="line">-- 之后在查询这个格式的数据的时候就可以在试图中查询了</span><br><span class="line">SELECT</span><br><span class="line">* </span><br><span class="line">FROM</span><br><span class="line">my_format;</span><br></pre></td></tr></table></figure><h3 id="用视图过滤不想要的数据"><a href="#用视图过滤不想要的数据" class="headerlink" title="用视图过滤不想要的数据"></a>用视图过滤不想要的数据</h3><blockquote><p>如果从视图检索数据时候使用了一条where子句，而视图中也有一个where子句，则两个子句将自动组合。</p></blockquote><h3 id="使用时突与计算字段"><a href="#使用时突与计算字段" class="headerlink" title="使用时突与计算字段"></a>使用时突与计算字段</h3><blockquote><p>例如查询购物车每种商品的总价，个数*单价，则可以先创建求购物车的每种商品总价视图，再用where过滤具体哪个购物车。</p></blockquote><h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><blockquote><p>mysql允许更新视图，实际上是对基表增加或删除行，但是当视图中有以下操作，则不能进行视图的更新<br>①分组<code>group by ...having</code><br>②联结<br>③子查询<br>④并<br>⑤聚集函数<br>⑥distinct<br>⑦导出列<br>看起来很多试图都是不可更新的，像是一个很严重的限制，实际上就是，因为视图主要适用于数据检索的</p></blockquote><h2 id="23-使用存储过程"><a href="#23-使用存储过程" class="headerlink" title="23.使用存储过程"></a>23.使用存储过程</h2><blockquote><p>###调用存储过程<br>mysql称存储过程的执行为调用，mysql调用存储过程需要用到<code>CALL</code>关键字。<br><code>CALL</code>接受存储过程的名字以及需要传递给他的任意参数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 例如，调用存储过程studentscore,它计算返回学生表所有行成绩的最低分、最高分、平均分</span><br><span class="line">CALL studentscore (@scorelow, @scorehigh, @scoreavg);</span><br></pre></td></tr></table></figure><h3 id="创建及调用存储过程"><a href="#创建及调用存储过程" class="headerlink" title="创建及调用存储过程"></a>创建及调用存储过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- mysql默认分隔符为分号 ; 这里修改成 $（注意不能修改为 \ ）</span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">-- 创建存储过程studentscore()，不带输入输出参数</span><br><span class="line">CREATE PROCEDURE studentscore ( ) </span><br><span class="line">-- 存储过程开始</span><br><span class="line">BEGIN</span><br><span class="line">SELECT</span><br><span class="line">AVG( score ) AS scoreavg </span><br><span class="line">FROM</span><br><span class="line">student;</span><br><span class="line">-- 存储过程结束</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">-- 把mysql默认分隔符改回 ;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">-- 调用刚才新建的存储过程studentscore()</span><br><span class="line">CALL studentscore();</span><br></pre></td></tr></table></figure><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除存储过程</span><br><span class="line">DROP PROCEDURE studentscore;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 更严谨一点，仅当存在时候删除存储过程studentscore</span><br><span class="line">DROP PROCEDURE</span><br><span class="line">IF</span><br><span class="line">EXISTS studentscore;</span><br></pre></td></tr></table></figure><h3 id="使用存储过程参数"><a href="#使用存储过程参数" class="headerlink" title="使用存储过程参数"></a>使用存储过程参数</h3><blockquote><p>关键字<code>out</code>用来指定从存储过程传出一个值（返回给调用者）<br>关键字<code>in</code>用来传递给存储过程一个参数<br>关键字<code>inout</code>用来指定对存储过程传入和传出类型的参数<br>存储过程的代码位于<code>begin</code>和<code>end</code>之间<br>存储过程可以是一个select语句然后把检索的值通过<code>into</code>关键字指定到相应变量。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">-- 创建存储并返回sl,sh,sa三个参数</span><br><span class="line">CREATE PROCEDURE studentscore (</span><br><span class="line">OUT sl DECIMAL ( 8, 2 ),</span><br><span class="line">OUT sh DECIMAL ( 8, 2 ),</span><br><span class="line">OUT sa DECIMAL ( 8, 2 ) </span><br><span class="line">) </span><br><span class="line">-- 开始存储过程</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">-- 查询成绩最低的存到sl参数</span><br><span class="line">SELECT</span><br><span class="line">MIN( score ) INTO sl </span><br><span class="line">FROM</span><br><span class="line">student;</span><br><span class="line">-- 查询成绩最高的存到sh参数</span><br><span class="line">SELECT</span><br><span class="line">max( score ) INTO sh </span><br><span class="line">FROM</span><br><span class="line">student;</span><br><span class="line">-- 查询成绩平均值的存到sa参数</span><br><span class="line">SELECT</span><br><span class="line">avg( score ) INTO sa </span><br><span class="line">FROM</span><br><span class="line">student;</span><br><span class="line"></span><br><span class="line">-- 存储过程结束</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">delimiter;</span><br><span class="line"></span><br><span class="line">-- 调用存储过程，用@开始的三个变量接收存储过程返回的三个值，在调用时，这条语句并不显示任何数据，为了显示这几个变量需要进行如下查询</span><br><span class="line">CALL studentscore(@sl, @sh, @sa);</span><br><span class="line"></span><br><span class="line">-- 为了显示三个存储过程返回的变量需要执行的查询</span><br><span class="line">SELECT</span><br><span class="line">@sl AS scorelow,</span><br><span class="line">@sh AS scorehigh,</span><br><span class="line">@sa AS scoreavg;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-1.png" alt="查询结果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">-- 创建存储过程接收inid参数，返回outscore参数</span><br><span class="line">CREATE PROCEDURE queryscorebyid ( </span><br><span class="line">IN inid INT, </span><br><span class="line">OUT outscore DECIMAL ( 8, 2 ) </span><br><span class="line">) </span><br><span class="line"></span><br><span class="line">-- 开始存储过程</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">-- 根据学生id查询学生成绩</span><br><span class="line">SELECT</span><br><span class="line">score </span><br><span class="line">FROM</span><br><span class="line">student </span><br><span class="line">WHERE</span><br><span class="line">id &#x3D; inid INTO outscore;</span><br><span class="line"></span><br><span class="line">-- 存储过程结束</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">delimiter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 调用存储过程，输入参数1，返回参数@outscore,相当于查询id&#x3D;1的学生成绩</span><br><span class="line">CALL queryscorebyid(1, @outscore);</span><br><span class="line">-- 查询@outscore参数的值</span><br><span class="line">select @outscore;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-2.png" alt="返回结果"></p><h3 id="建立智能存储过程"><a href="#建立智能存储过程" class="headerlink" title="建立智能存储过程"></a>建立智能存储过程</h3><blockquote><p>迄今为止，上边介绍的存储过程全是简单查询的存储过程，实际上存储过程是为了实现更加复杂的业务规则处理使用的。<br>考虑这个场景。你需要获得与以前一样的订单合计，但需要对合计增加营业税，不过只针对某些顾客（或许是你所在州中那些顾客）。那么，你需要做下面几件事情：<br>1、获得合计（和以前一样）<br>2、把营业税有条件的添加到合计<br>3、返回合计（带或不带税的）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- Name: ordertotal        &#x2F;&#x2F;   添加注释</span><br><span class="line">-- Parameters: onumber &#x3D; order number</span><br><span class="line">--             taxable &#x3D; 0 if not taxable, 1 if taxtable</span><br><span class="line">--             ototal &#x3D; order total variable</span><br><span class="line"></span><br><span class="line">CREATE     PROCEDURE ordertotal (</span><br><span class="line">IN onumber INT,</span><br><span class="line">IN taxable BOOLEAN,</span><br><span class="line">OUT ototal DECIMAL(8,2)</span><br><span class="line">) COMMENT &#39;Obtain order total, optionally adding tax&#39;</span><br><span class="line">BEGIN</span><br><span class="line">    </span><br><span class="line">        -- Declare variable for total</span><br><span class="line">        DECLARE total DECIMAL(8,2);     &#x2F;&#x2F;   声明变量   </span><br><span class="line">        -- Declare tax percentage</span><br><span class="line">        DECLARE taxrate INT DEFAULT 6;</span><br><span class="line">        </span><br><span class="line">        -- Get the order total</span><br><span class="line">        SELECT Sum(item_price*quantity)</span><br><span class="line">        FROM orderitems</span><br><span class="line">        WHERE order_num &#x3D; onumber</span><br><span class="line">        INTO total;</span><br><span class="line">        </span><br><span class="line">        -- Is this taxable?</span><br><span class="line">        IF taxable THEN</span><br><span class="line">            -- yes,so add taxrate to the total</span><br><span class="line">            SELECT total+(total&#x2F;100*taxrate) INTO total;</span><br><span class="line">        END IF;</span><br><span class="line">        --  And finally, save to out variable</span><br><span class="line">        SELECT total INTO ototal;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><blockquote><p>此存储过程有很大的变动。首先，增加了注释（前面放置 –）。在存储过程复杂性增加时，这样做特别重要。<br>添加了另外一个参数 taxable，它是一个布尔值（如果要增加税则为真，否则为假）。<br>在存储过程体中，用 DECLARE语句定义了两个局部变量。 DECLARE要求指定变量名和数据类型，<br>它也支持可选的默认值（这个例子中的 taxrate的默认被设置为 6%）。SELECT 语句变，因此其结果存储到 total（局部变量）而不是 ototal。<br>IF 语句检查taxable是否为真，如果为真，则用另一SELECT语句增加营业税到局部变量 total。<br>最后，用另一SELECT语句将total（它增加或许不增加营业税）保存到 ototal。<br>注意：COMMENT关键字 ，本例子中的存储过程在 CREATE PROCEDURE语句中包含了一个 COMMENT值。<br>它不是必需的，但如果给出，将在SHOW PROCEDURE STATUS的结果中显示。</p></blockquote><p>这显然是一个更高级，功能更强的存储过程。为试验它，请用以下两条语句：<br>第一条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call ordertotal(20005, 0, @total);</span><br><span class="line">SELECT @total;</span><br></pre></td></tr></table></figure><p>第二条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call ordertotal(20009, 1，@total);</span><br><span class="line">SELECT @total;</span><br></pre></td></tr></table></figure><blockquote><p>BOOLEAN值指定为1 表示真，指定为 0表示假（实际上，非零值都考虑为真，只有 0被视为假）。通过给中间的参数指定 0或1 ，可以有条件地将营业税加到订单合计上。</p></blockquote><blockquote><p>这个例子给出了 MySQL的IF 语句的基本用法。 IF语句还支持 ELSEIF和ELSE 子句（前者还使用 THEN子句，后者不使用）。在以后章节中我们将会看到 IF的其他用法（以及其他流控制语句）。</p></blockquote><h3 id="检查存储过程"><a href="#检查存储过程" class="headerlink" title="检查存储过程"></a>检查存储过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 显示创建存储过程的语句</span><br><span class="line">SHOW CREATE PROCEDURE studentscore;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-3.png" alt="显示的结果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 为了显示何时？ 由谁创建了存储过程？</span><br><span class="line">SHOW PROCEDURE STATUS;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-4.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 表比较多，用like过滤存储过程</span><br><span class="line">SHOW PROCEDURE STATUS LIKE &#39;studentscore&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-5.png" alt="image.png"></p><h2 id="24-使用游标"><a href="#24-使用游标" class="headerlink" title="24.使用游标"></a>24.使用游标</h2><blockquote><p>游标是一个存储在mysql服务器上的数据库查询，他不是一条select语句，而是被该语句检索出来的结果集，在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。<br><code>不像多数DBMS，mysql的游标只能用于存储过程和函数。</code></p></blockquote><h3 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h3><blockquote><p>使用游标涉及几个明确的步骤：<br>①在能够使用游标前，必须声明它，这个过程实际并没有检索数据，他只是定义要使用的select语句。<br>②一旦声明后，必须打开游标以供使用。这个过程用前面定义的select语句吧数据实际检索出来。<br>③对于填写有数据的游标，根据需要检索各行。<br>④在结束游标使用时，必须关闭游标。<br>⑤在声明游标后，可根据需要频繁的打开和关闭游标。在油表打开后，可根据需要频繁的执行取操作。</p></blockquote><h3 id="创建游标-打开和关闭游标"><a href="#创建游标-打开和关闭游标" class="headerlink" title="创建游标,打开和关闭游标"></a>创建游标,打开和关闭游标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">-- 创建存储过程studentscore()</span><br><span class="line">CREATE PROCEDURE studentscore ( )</span><br><span class="line"></span><br><span class="line">-- 存储过程开始</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">-- 声明游标queryscore从下面的select中</span><br><span class="line">DECLARE</span><br><span class="line">queryscore CURSOR FOR</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">score </span><br><span class="line">FROM</span><br><span class="line">student;</span><br><span class="line"></span><br><span class="line">    -- 打开刚才声明的游标</span><br><span class="line">OPEN queryscore;</span><br><span class="line"></span><br><span class="line">-- 关闭游标</span><br><span class="line">CLOSE queryscore;</span><br><span class="line"></span><br><span class="line">-- 存储过程结束</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">delimiter;</span><br></pre></td></tr></table></figure><blockquote><p>在一个游标关闭后，如果不重新打开，则无法使用它，声明过的游标不需要再次声明，打开它就可以使用了。</p></blockquote><h3 id="使用游标数据"><a href="#使用游标数据" class="headerlink" title="使用游标数据"></a>使用游标数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">-- 创建存储过程studentscore()</span><br><span class="line">CREATE PROCEDURE studentscore ( OUT abc INT) </span><br><span class="line"></span><br><span class="line">-- 存储过程开始</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">-- 声明一个本地参数</span><br><span class="line">DECLARE myscore INT;</span><br><span class="line"></span><br><span class="line">-- 声明游标queryscore从下面的select中</span><br><span class="line">DECLARE</span><br><span class="line">queryscore CURSOR FOR</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">score </span><br><span class="line">FROM</span><br><span class="line">student;</span><br><span class="line"></span><br><span class="line">-- 打开刚才声明的游标</span><br><span class="line">OPEN queryscore;</span><br><span class="line"></span><br><span class="line">-- 从游标中检索单个行，第一行</span><br><span class="line">FETCH queryscore INTO myscore;</span><br><span class="line">-- 设置返回参数 &#x3D; 本地参数myscore</span><br><span class="line">SET abc :&#x3D; myscore;</span><br><span class="line"></span><br><span class="line">-- 关闭游标</span><br><span class="line">CLOSE queryscore;</span><br><span class="line"></span><br><span class="line">-- 存储过程结束</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">delimiter;</span><br><span class="line"></span><br><span class="line">-- 调用存储过程</span><br><span class="line">CALL studentscore(@abc);</span><br><span class="line"></span><br><span class="line">-- 查询返回值@abc</span><br><span class="line">SELECT @abc;</span><br></pre></td></tr></table></figure><h2 id="25-使用触发器"><a href="#25-使用触发器" class="headerlink" title="25.使用触发器"></a>25.使用触发器</h2><blockquote><p>mysql语句在需要被执行时执行，存储过程也是如此，但是如果你想要某条语句在事件发生时自动执行，例如：①用户订购一个产品，在库存中减少相应数量<br>②无论何时删除一行，都在存档表中保留一个副本<br>③每添加一个顾客，都检查他的手机号码格式时候正确</p></blockquote><p><strong>所有以上这些例子共同之处就是需要某个表发生更改时候自动处理，这确切的说就是触发器，触发器是相应增删改而自动执行的一条mysql语句，（或位于begin和end之间的一组语句）</strong></p><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><blockquote><p>①唯一的触发器名<br>②触发器关联的表<br>③触发器应该相应的活动（delete/insert/update）<br>④触发器或是执行（处理之前或处理之后）</p></blockquote><blockquote><p>触发器在mysql5中是以表为分界触发器名在表中必须唯一，这一点在其他DBMS中是不允许的，而且以后的MySQL版本很可能会使命名规则更为严格。因此，现在最好是在数据库范围内使用唯一的触发器名。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 如书上这么写会报错1415 - Not allowed to return a result set from a trigger，</span><br><span class="line">-- 因为mysql5之后不支持mysql返回结果集</span><br><span class="line"></span><br><span class="line">CREATE TRIGGER newclass AFTER INSERT ON t_class FOR EACH ROW</span><br><span class="line">SELECT</span><br><span class="line">&#39;插入成功&#39;;</span><br><span class="line"></span><br><span class="line">-- 所以把如上写法加上into @ee把结果赋值给ee参数就可以了</span><br><span class="line">-- 解释：创建触发器名为newclass，触发器在t_class表每一行的插入之后执行查询 插入成功 赋值给 @ee</span><br><span class="line">CREATE TRIGGER newclass AFTER INSERT ON t_class FOR EACH ROW</span><br><span class="line">SELECT</span><br><span class="line">&#39;插入成功&#39; into @ee;</span><br><span class="line"></span><br><span class="line">-- 插入</span><br><span class="line">INSERT INTO t_class ( id, &#96;name&#96; )</span><br><span class="line">VALUES</span><br><span class="line">( 5, &#39;摄影班&#39; );</span><br><span class="line"></span><br><span class="line">-- 查询@ee看是否有值为 插入成功</span><br><span class="line">select @ee;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-6.png" alt="image.png"></p><blockquote><p>仅支持表，只有表才支持触发器，视图不支持，临时表也不支持。触发器每个表每个事件每次只允许一个触发器，因此每个表最多支持6个触发器，insert之前之后、update之前之后、delete之前之后，并且单一触发器不能与多个事件和多个表关联。</p></blockquote><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><p><strong>触发器不能更新或者覆盖，因此想要修改一个触发器，必须先删除它</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除刚才创建的触发器newclass</span><br><span class="line">drop trigger newclass;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-7.png" alt="image.png"></p><h3 id="删除触发器-1"><a href="#删除触发器-1" class="headerlink" title="删除触发器"></a>删除触发器</h3><blockquote><p>①在删除触发器代码内，亦可以引用一个名为OLD的虚拟表，访问将要被删除的行。<br>②OLD的值全部是只读的，不能更新。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 创建触发器deleteclass 在删除t_class表的每行之前执行，执行查询将要删除的t_class的name赋值给@deleteName变量</span><br><span class="line">CREATE TRIGGER deleteclass BEFORE DELETE ON t_class FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">SELECT</span><br><span class="line">OLD.NAME INTO @deleteName;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">-- 查询变量@deleteName为空</span><br><span class="line">SELECT @deleteName;</span><br><span class="line"></span><br><span class="line">-- 删除t_class表的一条数据</span><br><span class="line">DELETE FROM t_class where id&#x3D;5;</span><br><span class="line"></span><br><span class="line">-- 再次查询变量@deleteName</span><br><span class="line">SELECT @deleteName;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-8.png" alt="image.png"></p><h3 id="update触发器"><a href="#update触发器" class="headerlink" title="update触发器"></a>update触发器</h3><blockquote><p>①在update触发器中亦可以引用一个OLD的虚拟表，访问更新前的值，引用一个NEW的虚拟表访问更新后的值<br>②在BEFORE UPDATE触发器中，new中的值可能被更新（允许在触发器中更新将要用于更新的值）<br>③OLD中的值全部是只读的</p></blockquote><blockquote><p>mysql的触发器中不能调用存储过程，也就是不能用CALL，如果想要使用存储过程，需要复制存储过程代码到触发器内。</p></blockquote><h2 id="26-管理事务处理"><a href="#26-管理事务处理" class="headerlink" title="26.管理事务处理"></a>26.管理事务处理</h2><h3 id="1-事务处理"><a href="#1-事务处理" class="headerlink" title="1.事务处理"></a>1.事务处理</h3><blockquote><p>并非是所有的数据库引擎都支持数据处理，<code>MyISAM</code>和<code>InnoDB</code>是mysql中最常使用的两种引擎，前者不支持事务处理，而后者支持。事务处理用来维护数据库的完整性，他保证成批的mysql操作要么完全执行，要么完全不执行。</p></blockquote><h3 id="2-控制事务处理"><a href="#2-控制事务处理" class="headerlink" title="2.控制事务处理"></a>2.控制事务处理</h3><p>管理事务处理的关键在于将SQL语句组分解为逻辑块，病明确规定数据何时应该回退，何时不应该回退。</p><p>mysql使用下面的语句来标识事务的开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION</span><br></pre></td></tr></table></figure><p>mysql的<code>Rollback</code> 命令用来回退mysql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有学生</span><br><span class="line">SELECT * FROM t_student;</span><br><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line">-- 删除所有学生</span><br><span class="line">delete from t_student;</span><br><span class="line">-- 查询所有学生（已删除）</span><br><span class="line">select * from t_student;</span><br><span class="line">-- 回退</span><br><span class="line">Rollback;</span><br><span class="line">-- 查询所有学生（删除的已经回来了）</span><br><span class="line">select * from t_student;</span><br></pre></td></tr></table></figure><blockquote><p>显然，<code>rollback</code>只能够在一个事务处理之内使用（在事务开始之后使用）</p></blockquote><p>哪些语句不能回退？</p><ul><li><code>select</code>回退查询没有意义</li><li><code>create</code>和<code>drop</code>这两个关键字执行完毕后不可以回退，即使执行回退，也不会被撤销。</li></ul><h3 id="3-使用commit"><a href="#3-使用commit" class="headerlink" title="3.使用commit"></a>3.使用<code>commit</code></h3><p>一般的sql语句都是默认执行隐式的提交的，但是在事务中，不会进行隐式的提交，为了明确提交操作，可以使用<code>commit</code>关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line">delete from student where id &#x3D; 1;</span><br><span class="line">delete from student where id &#x3D; 2;</span><br><span class="line">-- 提交事务</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><blockquote><p>例如上面的事务处理，首先如果两条数据都能够删除成功，则执行commit提交事务，如果任意一条删除失败则不会提交事务，会被自动撤销。</p><p>当执行<code>commit</code>和<code>rollback</code>之后，事务会自动关闭，之后的sql默认隐式的提交。</p></blockquote><h3 id="4-使用保留点"><a href="#4-使用保留点" class="headerlink" title="4.使用保留点"></a>4.使用保留点</h3><p>简单的事务处理可以使用<code>Rollback</code>或者<code>commit</code>回退或提交整个事务，但是复杂的事务操作往往需要我们只回退一部分事务，这就需要在事务处理块中合适的位置放置<code>占位符</code>这样如果需要回退操作，可以回退到某个占位符。这些占位符被称为<code>保留点</code>为了创建占位符，可使用<code>savepoint</code>关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 每个保留点都取一个唯一的名字，以便回退的时候精准定位回退到何处</span><br><span class="line">savepoint &#96;delete-1&#96;;</span><br><span class="line">-- 回退到delete-1保留点</span><br><span class="line">rollback to &#96;delete-1&#96;;</span><br></pre></td></tr></table></figure><blockquote><p>保留点越多越好？</p><p>是这样的，因为保留点越多你越能够按照自己的意愿灵活的进行回退。</p><p>保留点在事务处理完成，执行一条Rollback或者commit之后自动释放。自mysql5以来，也可以使用<code>release savepoint</code>关键字明确的释放保留点。</p></blockquote><h3 id="5-更改默认的提交行为"><a href="#5-更改默认的提交行为" class="headerlink" title="5.更改默认的提交行为"></a>5.更改默认的提交行为</h3><p>正如上面所述：mysql默认行为是自动提交的，如果要修改不自动提交，可以如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set autocommit &#x3D; 0;</span><br><span class="line">-- autocommit标志决定是否自动提交更改，设置为0之后，不自动提交，直到使用commit提交或者设置autocommit&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="27-全球化和本地化"><a href="#27-全球化和本地化" class="headerlink" title="27.全球化和本地化"></a>27.全球化和本地化</h2><h3 id="1-字符集和校对顺序"><a href="#1-字符集和校对顺序" class="headerlink" title="1.字符集和校对顺序"></a>1.字符集和校对顺序</h3><p>数据库用来存储和检索数据，不同语言和字符集需要以不同的方式进行存储和检索，因此mysql需要适应不同的字符集。</p><ul><li>字符集：字母和符号的集合；</li><li>编码：为某个字符集成员的内部表示；</li><li>校对：为规定字符如何比较的指令。</li></ul><blockquote><p>简而言之，就是例如大小写，不同语言，日语、俄语、法语等等之间的排序问题，由字符集来控制。</p></blockquote><h3 id="2-使用字符集和校对顺序"><a href="#2-使用字符集和校对顺序" class="headerlink" title="2.使用字符集和校对顺序"></a>2.使用字符集和校对顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询mysql支持的所有字符集</span><br><span class="line">show character set;</span><br><span class="line">-- 查看所支持校对的完整列表</span><br><span class="line">show collation;</span><br></pre></td></tr></table></figure><blockquote><p>此语句显示所有可用校对，以及他们适用的字符集，例如：<code>latin1</code>对不同的欧洲语言有几种校对，而许多校对出现两次，一次区分大小写 <code>_cs</code> 表示，一次不区分大小写 <code>_ci</code> 表示</p></blockquote><p>为了查询所用的字符集和校对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所用字符集</span><br><span class="line">show variables like &#39;character%&#39;;</span><br><span class="line">-- 所用校对</span><br><span class="line">show variables like &#39;collation%&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>实际上，字符集很少是服务器或者数据库层面的设置，不同的表，甚至不同的列都有可能需要不同的字符集，而且两者都可以在创建表的时候指定。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table mytable</span><br><span class="line">(</span><br><span class="line">column1 int,</span><br><span class="line">    column2 varchar(10) character set latin1 collate latin1_general_ci</span><br><span class="line">) default character set utf8</span><br><span class="line">collate utf8_general_ci;</span><br></pre></td></tr></table></figure><blockquote><p>上面这个例子既指定了字符集，还指定了校对，</p><p>如果只指定字符集，则使用它的默认校对，如<code>show character set;</code>查询到的默认校对，</p><p>如果都不指定，则使用数据库的默认</p><p>上图还指定了column2这一列应该使用的字符集和校对。</p></blockquote><p>如前所述，校对在对用order by 的字句检索出来的数据排序其非常重要的作用，如果你需要用与创建表时候不同的校对排序特定的select语句，你可以如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 在不区分大小写的表中临时区分大小写进行查询</span><br><span class="line">select * from student order by lastname, firstname Collate utf8_general_cs;</span><br></pre></td></tr></table></figure><ul><li>select 的其他collate字句， Collate临时在select中改变校对顺序还可以用于group by、having、聚合函数、别名等。</li><li>值得注意的是，如果绝对需要，串可以在字符集之间进行转换。为此，使用cast()或者convert()函数。</li></ul><h2 id="28-安全管理"><a href="#28-安全管理" class="headerlink" title="28.安全管理"></a>28.安全管理</h2><h3 id="1-访问控制"><a href="#1-访问控制" class="headerlink" title="1.访问控制"></a>1.访问控制</h3><p>MySQL的服务器的安全基础是，用户应该对他们需要的数据具有适当的访问权，既不能多，也不能少。我们都知道为了执行数据库操作，需要登录，一般我们总是习惯直接使用root用户进行操作，他对整个数据库具有完全控制权限，这在学习中是可以的，但是在现实生产环境中，绝对不能使用root,应该创建一系列账号，有的用于管理，有的用于用户使用，有的用于开发人员开发，等等。</p><h3 id="2-管理用户"><a href="#2-管理用户" class="headerlink" title="2.管理用户"></a>2.管理用户</h3><p>mysql的用户账号和信息存储在名为mysql的数据库表中，一般不需要直接访问，但是有时候需要直接访问，直接访问的契机之一是需要获得所有用户账号列表，为此可以写出下面的sql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 使用mysql数据库</span><br><span class="line">USE &#96;mysql&#96;;</span><br><span class="line">-- 查询user字段从user表</span><br><span class="line">select user from &#96;user&#96;;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-9.png" alt="image-20200324202553530"></p><h4 id="2-1创建用户账号"><a href="#2-1创建用户账号" class="headerlink" title="2.1创建用户账号"></a>2.1创建用户账号</h4><p>创建用户账号可以使用<code>create user</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 创建新的用户yunqing密码是123456</span><br><span class="line">CREATE USER yunqing IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">-- 查询所用用户</span><br><span class="line">SELECT USER FROM USER;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-10.png" alt="image-20200324203210472"></p><p>修改账户名和删除账户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 重命名账户</span><br><span class="line">RENAME USER yunqing TO qing;</span><br><span class="line">-- 删除账户</span><br><span class="line">DROP USER qing;</span><br></pre></td></tr></table></figure><h4 id="2-2设置访问权限"><a href="#2-2设置访问权限" class="headerlink" title="2.2设置访问权限"></a>2.2设置访问权限</h4><p>在创建新用户之后，必须接着分配访问权限，新账户没有访问权限，他们能够登陆mysql但是不能看到任何数据，不能执行任何数据操作。为了查看账户权限可以使用关键字<code>show grants for</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-11.png" alt="image-20200324204323504"></p><p>输出的结果显示yunqing账户有一个权限<code>USAGE ON  *.*</code>  .USAGE表示没有任何权限。所以此结果表示的是任意数据库任意表上对任何数据没有权限。</p><p>如果想要赋予用户权限，请使用<code>grant</code>关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 给yunqing账户赋予查询student的权限</span><br><span class="line">GRANT SELECT ON student.* TO yunqing;</span><br></pre></td></tr></table></figure><p><code>grant</code>的反操作是 <code>revoke</code>他用来撤销特定用户的特定权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 给yunqing账户撤销查询student的权限</span><br><span class="line">REVOKE SELECT ON kls.* FROM yunqing;</span><br></pre></td></tr></table></figure><ul><li><code>grant</code>和<code>revoke</code>可以在几个层次上控制访问权限</li></ul><ol><li>整个服务器，使用<code>GRANT ALL</code>和<code>REVOKE ALL</code>;</li><li>整个数据库，使用<code>on database.*</code>;</li><li>特定的表，使用<code>on database.table</code>;</li><li>特定的列；</li><li>特定的存储过程</li></ol><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-12.png" alt="image-20200324210645930"></p><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-13.png" alt="image-20200324210727050"></p><h4 id="2-3更改口令"><a href="#2-3更改口令" class="headerlink" title="2.3更改口令"></a>2.3更改口令</h4><p>为了更改用户密码，可以使用<code>set password</code>关键字，新的口令必须做如下加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 设置账户新密码，必须使用password()函数进行加密</span><br><span class="line">SET PASSWORD FOR yunqing &#x3D; PASSWORD(&#39;1234&#39;);</span><br></pre></td></tr></table></figure><ul><li>在不指定账户名时候，上面的语句可以更新当前登录用户的密码</li></ul><h2 id="29-数据库维护"><a href="#29-数据库维护" class="headerlink" title="29.数据库维护"></a>29.数据库维护</h2><h3 id="1-备份数据"><a href="#1-备份数据" class="headerlink" title="1.备份数据"></a>1.备份数据</h3><p>废话不多说，备份很重要，mysql基于磁盘文件，普通的备份系统和里程就能备份mysql的数据，但是由于这些文件总是处于打开和使用的状态，普通的文件副本备份不一定总是有效。</p><p>下面列出这个问题的可能解决方案：</p><ul><li>使用命令行实用程序mysqkdump转储所有数据库内容到某个外部文件。</li><li>可用命令行实用程序mysqlhotcopy从一个数据库复制所有数据（并非所有数据库引擎都支持这个实用程序）</li><li>可以使用mysql的BACKUP TABLE和select into outfile转储所有数据到某个外部文件。这两条语句都接受将要创建的系统文件名，这个文件必须存在，否则会出错，数据可以用restore table复原。</li></ul><blockquote><p>为了保证所有数据被写到磁盘，包括索引，可能需要在进行备份之前使用<code>flush tables</code>语句</p></blockquote><h3 id="2-进行数据库维护"><a href="#2-进行数据库维护" class="headerlink" title="2.进行数据库维护"></a>2.进行数据库维护</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 检查博鳌键是否正确</span><br><span class="line">analyze table student;</span><br><span class="line">-- 发现和修复表问题</span><br><span class="line">check table student,school;</span><br><span class="line">-- 检查子最后一次检查以来改动过的表</span><br><span class="line">changed</span><br><span class="line">-- 执行最彻底的检查</span><br><span class="line">extended</span><br><span class="line">-- 只检查未正常关闭的表</span><br><span class="line">fast</span><br><span class="line">-- 检查所有被删除的链接并进行键检查</span><br><span class="line">medium</span><br><span class="line">-- 只进行快速扫描</span><br><span class="line">quick</span><br><span class="line">-- 如果myISAM表访问产生不正确或不一致的结果，可以如下修复表,这个语句不应该经常使用，如果经常使用，可能会产生更大的问题需要解决</span><br><span class="line">repair table student;</span><br><span class="line">-- 如果一个表删除了大量数据，需要回收空间，优化表的性能</span><br><span class="line">optimize table student;</span><br></pre></td></tr></table></figure><h3 id="3-诊断启动问题"><a href="#3-诊断启动问题" class="headerlink" title="3.诊断启动问题"></a>3.诊断启动问题</h3><p>mysql服务器自身通过在命令行上执行<code>mysqld</code>启动，下面是几个重要的<code>mysqld</code>参数</p><ul><li>–help 显示帮助</li><li>–safe-mode装在减去某些最佳配置的服务器</li><li>–verbose显示全文本纤细（为了获取更详细的帮助信息与–help一起使用）</li><li>–version显示版本信息然后退出</li></ul><h3 id="4-查看日志文件"><a href="#4-查看日志文件" class="headerlink" title="4.查看日志文件"></a>4.查看日志文件</h3><ul><li>错误日志：它包含启动和关闭问题以及任意关键错误的细节，此日志通常名为hostname.err位于data目录中，此日志名可用–log-error命令行选项更改</li><li>查询日志：他记录所有mysql活动，在诊断问题时候非常有用。此日志很快会变得非常大，因此不应该长期使用它。此日志通常名为hostname.log位于data目录中，可用–log命令行选项更改</li><li>二进制日志：他记录更新过数据的所有语句，名为hostname.bin位于data目录，–log-bin进行更改。</li><li>缓慢查询日志：此日志记录执行缓慢的任何查询，这个日志对mysql优化有很大作用，通常名为<code>hostname-slow.log</code>位于data目录，可用<code>--log-slow-queries</code>命令行选项更改。</li><li>在使用日志时，可使用<code>flush logs</code>来刷新和重新开始所有日志文件。</li></ul><h2 id="30-改善性能"><a href="#30-改善性能" class="headerlink" title="30.改善性能"></a>30.改善性能</h2><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-14.png" alt="image-20200324213946593"></p><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/23-970ccb5d-15.png" alt="image-20200324214032975"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;21-创建和操纵表&quot;&gt;&lt;a href=&quot;#21-创建和操纵表&quot; class=&quot;headerlink&quot; title=&quot;21.创建和操纵表&quot;&gt;&lt;/a&gt;21.创建和操纵表&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE &amp;#96;t_class&amp;#96; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#96;id&amp;#96; INT NOT NULL Auto_Increment, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#96;name&amp;#96; VARCHAR ( 20 ) NOT NULL, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PRIMARY KEY ( &amp;#96;id&amp;#96; ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE &amp;#x3D; INNODB;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://www.yunqing.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql必知必会读书笔记（2）</title>
    <link href="http://www.yunqing.xyz/article/2fb0ac38.html"/>
    <id>http://www.yunqing.xyz/article/2fb0ac38.html</id>
    <published>2020-03-22T11:06:52.000Z</published>
    <updated>2020-03-23T12:35:51.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="11-使用数据处理函数"><a href="#11-使用数据处理函数" class="headerlink" title="11.使用数据处理函数"></a>11.使用数据处理函数</h2><h3 id="常用的文本处理函数"><a href="#常用的文本处理函数" class="headerlink" title="常用的文本处理函数"></a>常用的文本处理函数</h3><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-1.png" alt="22-2fb0ac38-1"></p><a id="more"></a><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-2.png" alt="22-2fb0ac38-2"></p><blockquote><p>对Soundex()做一个解释：此函数是对任意文本串转化成其发音的算法。所以只要是发音类似的结果都会被查询出来。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 例如学生名字为 Y.Lee录入的时候录入错误，录成 Y.Lie 这时候如下查找会查找不到。</span><br><span class="line">select name from student where name &#x3D; &#39;Y.Lee&#39;;</span><br><span class="line">#如下使用Soundex()函数就能查找出来</span><br><span class="line">select name from student where Soundex(name) &#x3D; Soundex(&#39;Y.Lee&#39;);</span><br></pre></td></tr></table></figure><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-3.png" alt="image.png"></p><blockquote><p>注意：当使用where条件搜索日期为某一天的记录时候，通常这样写…where date = ‘2020-02-02’;但是这种写法并不严谨，因为如果当数据库date类型为datetime的时候，表中数据会有时间值00:00:00则此时上面的写法就不严谨了，需要用时间处理函数取日期部分，我们可以这样写：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... where Date(date) &#x3D; &#39;2020-02-02&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>例如：我们需要获取2020年2月份的所有订单？如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 第一种解法：需要知道2月份有多少天，比如2020年闰年29天</span><br><span class="line">...where Date(order_date) between &#39;2020-02-01&#39;  and &#39;2020-02-29&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>上面用到between关键字，可以查询2月1到29号的2月份区间的订单，缺点是必须知道2月有多少天，所以我们可以如下写，根本不用关心2月份有多少天。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 注意用到了Year()函数和Month()函数</span><br><span class="line">...where Year(order_date) &#x3D; 2020 and Month(order_date) &#x3D; 2;</span><br></pre></td></tr></table></figure><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-4.png" alt="image.png"></p><h2 id="12-汇总数据"><a href="#12-汇总数据" class="headerlink" title="12.汇总数据"></a>12.汇总数据</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-5.png" alt="image.png"></p><blockquote><p>注意： AVG()函数只能求特定一列的平均值并且会忽略列值为NULL的行</p></blockquote><blockquote><p>COUNT(<em>)返回总行数，包含NULL值； COUNT(列名)返回总行数，不含NULL值； DISTINCT COUNT(</em>)返回总行数，去除重复且不含NULL值,COUNT(1)和count(*)返回结果一致。</p></blockquote><blockquote><p>Max()函数、Min()函数、Sum()函数都忽略列值为NULL的行</p></blockquote><h3 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h3><blockquote><p>正如标题字面意思聚集不同值即为把<code>distinct</code>关键字用于聚集函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 求不同价格商品的平均值</span><br><span class="line">select avg(distinct prod_price) from products;</span><br></pre></td></tr></table></figure><h2 id="13-分组数据"><a href="#13-分组数据" class="headerlink" title="13.分组数据"></a>13.分组数据</h2><p>关于Group by 分组的一些规定：<br>①group by 字句可以包含任意数量的列，这使得能对分组进行嵌套，为分组提供更细致的控制。<br>②如果在Group By子句中嵌套了分组,数据将在最后指定的分组上进行汇总。换句话说,在建立分组时，指定的所有列都一起计算(不能从个别的列中取回数据)。<br>③Group By子句中列出的每一列都必须是检索列(或者有效的表达式,注意不能是聚集函数)。如果在SELECT中使用了检索列(或者表达式),则在Group By子句中使用相同的表达式,不能使用别名。<br>④除聚集计算语句外,SELECT语句中的每一列都必须在Group By中给出。<br>⑤如果分组列中包含具有Null值的行,则Null将作为一个分组返回,如果列中有多行Null，他们将作为一个分组返回<br>⑥Group By必须出现在Where子句之后,Order By子句之前。</p><h3 id="WITH-ROLLUP-关键字进行分组汇总"><a href="#WITH-ROLLUP-关键字进行分组汇总" class="headerlink" title="WITH ROLLUP 关键字进行分组汇总"></a>WITH ROLLUP 关键字进行分组汇总</h3><blockquote><p>使用<code>with ROLLUP</code>关键字，可以得到每个分组以及每个分组汇总级别(针对每个分组)的值。如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">&#96;name&#96;,</span><br><span class="line">count( * ) AS num </span><br><span class="line">FROM</span><br><span class="line">student </span><br><span class="line">GROUP BY</span><br><span class="line">&#96;name&#96; WITH ROLLUP;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-6.png" alt="image.png"></p><h3 id="对分组进行过滤-Having"><a href="#对分组进行过滤-Having" class="headerlink" title="对分组进行过滤 Having"></a>对分组进行过滤 Having</h3><blockquote><p>having是对分组后的数据进行过滤，而where是对分组之前的数据进行过滤。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">&#96;name&#96;,</span><br><span class="line">count( * ) AS num </span><br><span class="line">FROM</span><br><span class="line">student </span><br><span class="line">WHERE</span><br><span class="line">&#96;name&#96; &lt;&gt; &#39;xm&#39; </span><br><span class="line">GROUP BY</span><br><span class="line">&#96;name&#96; </span><br><span class="line">HAVING</span><br><span class="line">count( * ) &gt; 1;</span><br></pre></td></tr></table></figure><blockquote><p>where过滤掉name=’xm’的数据，然后having再过滤掉出满足数量大于1的分组。</p></blockquote><blockquote><p>注意在使用<code>group by</code>进行分组的时候，也使用<code>order by</code>进行排序，这是保证数据正确排序的唯一方法，千万不要仅仅依赖<code>group by</code>排序数据。</p></blockquote><p>小结：列出select子句的顺序：<br><code>select</code><br><code>from</code><br><code>where</code><br><code>group by</code><br><code>having</code><br><code>order by</code><br><code>limit</code></p><h2 id="14-使用子查询"><a href="#14-使用子查询" class="headerlink" title="14.使用子查询"></a>14.使用子查询</h2><p>例如：从<code>customers</code>客户表中检索客户列表<br>对于检索出的每个客户，统计其在<code>orders</code>订单表中的订单数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select &#96;name&#96;，state,</span><br><span class="line">(select count(*) from orders where orders.cust_id &#x3D; customers.cust_id) as orders</span><br><span class="line">from customers </span><br><span class="line">order by &#96;name&#96;;</span><br></pre></td></tr></table></figure><h2 id="15-联表查询"><a href="#15-联表查询" class="headerlink" title="15.联表查询"></a>15.联表查询</h2><h3 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h3><p>创建联结非常简单，规定要联结的表以及他们如何关联即可。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">t1.id,</span><br><span class="line">t1.&#96;name&#96; className,</span><br><span class="line">t2.&#96;name&#96; AS studentName,</span><br><span class="line">t2.score </span><br><span class="line">FROM</span><br><span class="line">t_class t1,</span><br><span class="line">student t2 </span><br><span class="line">WHERE</span><br><span class="line">t1.id &#x3D; t2.class_id </span><br><span class="line">ORDER BY</span><br><span class="line">t1.id,</span><br><span class="line">t2.score</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-7.png" alt="image.png"></p><blockquote><p>注意：联结表查询的联结条件很重要，上面这段sql的联结条件是where 班级表的id = 学生表的班级id<br>如果不写联结条件的话，就会生成<code>笛卡尔积</code>。<br><code>笛卡尔积</code>就是联结的两张表，用第一张表每一行去联结第二张表每一行，因为没有联结条件，所以就会生成<code>笛卡尔积</code><br>例如：上面的联结查询如果不写where联结条件的话,就会得到<code>笛卡尔积</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">t1.id,</span><br><span class="line">t1.&#96;name&#96; className,</span><br><span class="line">t2.&#96;name&#96; AS studentName,</span><br><span class="line">t2.score </span><br><span class="line">FROM</span><br><span class="line">t_class t1,</span><br><span class="line">student t2 </span><br><span class="line">ORDER BY</span><br><span class="line">t1.id,</span><br><span class="line">t2.score</span><br></pre></td></tr></table></figure><h3 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h3><p>目前为止所用的联结称为<code>等值联结</code>，它基于两个表之间的相等进行联结，这种联结也称为<code>内联</code>，对于这种联结可以使用一种新的推荐语法来写，就是<code>inner join ...  on</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 两个表的联结条件是ON</span><br><span class="line">SELECT</span><br><span class="line">t1.id,</span><br><span class="line">t1.&#96;name&#96; className,</span><br><span class="line">t2.&#96;name&#96; AS studentName,</span><br><span class="line">t2.score </span><br><span class="line">FROM</span><br><span class="line">t_class t1</span><br><span class="line">INNER JOIN student t2 ON t1.id &#x3D; t2.class_id </span><br><span class="line">ORDER BY</span><br><span class="line">t1.id,</span><br><span class="line">t2.score</span><br></pre></td></tr></table></figure><h3 id="联结多张表"><a href="#联结多张表" class="headerlink" title="联结多张表"></a>联结多张表</h3><blockquote><p>注意：mysql对于一条select 语句中可以联结的表的数量没有限制，但是联结的表越多，性能下降越厉害，所以我们应该考虑必要的表进行联结，尽量减少联结的表的个数，阿里巴巴java开发手册中也写到，超过3张表禁止join.</p></blockquote><h2 id="16-创建高级联结"><a href="#16-创建高级联结" class="headerlink" title="16.创建高级联结"></a>16.创建高级联结</h2><h3 id="使用别名是一种很好的习惯（表别名、列别名）"><a href="#使用别名是一种很好的习惯（表别名、列别名）" class="headerlink" title="使用别名是一种很好的习惯（表别名、列别名）"></a>使用别名是一种很好的习惯（表别名、列别名）</h3><h3 id="使用不同类型的联结"><a href="#使用不同类型的联结" class="headerlink" title="使用不同类型的联结"></a>使用不同类型的联结</h3><p><strong>1.自联结</strong></p><blockquote><p>例如：你的id为a的货品有质量问题，所以你想知道a货品的供货商的其他商品是否也有问题，查询出货品a所属供货商的所有货品。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 使用子查询</span><br><span class="line">SELECT</span><br><span class="line">t1.prod_id,</span><br><span class="line">t1.prod_name </span><br><span class="line">FROM</span><br><span class="line">products t1 </span><br><span class="line">WHERE</span><br><span class="line">t1.ghs_id &#x3D; ( SELECT t2.ghs.id FROM products t2 WHERE t2.prod_id &#x3D; &#39;a&#39;; )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 使用自联结查询</span><br><span class="line">SELECT</span><br><span class="line">t1.prod_id,</span><br><span class="line">t1.prod_name </span><br><span class="line">FROM</span><br><span class="line">products t1,</span><br><span class="line">products t2 </span><br><span class="line">WHERE</span><br><span class="line">t1.ghs_id &#x3D; t2.ghs_id </span><br><span class="line">AND t1.prod_id &#x3D; &#39;a&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>使用自联结而不是子查询？自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句，虽然查询结果是相同的，但是有时候处理联结的速度比子查询快得多。</p></blockquote><p><strong>2.外联结(左外联结、右外联结)</strong></p><blockquote><p>在使用<code>outer join</code>语法时候必须指定<code>left</code> 或者  <code>right</code> 关键字来确定包括其所有行的表，实际上外连接经常被我们简写成<code>left join... on</code>和<code>right join...on</code></p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>①注意所使用的联结类型。一般我们使用内部联结，但是使用外联结也是有效的。<br>②保证使用正确的联结条件，否则将返回不正确的数据。<br>③应该总是提供联结条件on….不然会得出<code>笛卡尔积</code><br>④在一个联结中可以包含多个表，甚至对于每个联结可以使用不同的联结类型，虽然是合法的，但是应该在一起测试前，分别测试每个联结，这将使故障排除更简单。</p></blockquote><h2 id="17-组合查询UNION"><a href="#17-组合查询UNION" class="headerlink" title="17.组合查询UNION"></a>17.组合查询UNION</h2><blockquote><p>有两种情况需要用到组合查询：<br>①在单个查询中从不同的表返回类似结构的数据<br>②对单个表执行多个查询，按单个查询返回结果</p></blockquote><p><code>union相当于拼接两个select的结果，每一个where ....or ...都能拆成union组合查询</code></p><blockquote><p><code>union</code>使用规则：<br>①union必须由两条或以上的select语句组成<br>②union中的每个查询必须包含相同的列、表达式或聚集函数<code>（注意：列的顺序也必须相同）</code><br>③列数据类型必须兼容，类型不必完全相同，但是必须DBMS可以隐式转换的类型。</p></blockquote><h3 id="UNION默认取消重复行（保留一条），如果返回所有即使重复可以用UNION-ALL"><a href="#UNION默认取消重复行（保留一条），如果返回所有即使重复可以用UNION-ALL" class="headerlink" title="UNION默认取消重复行（保留一条），如果返回所有即使重复可以用UNION ALL"></a>UNION默认取消重复行（保留一条），如果返回所有即使重复可以用UNION ALL</h3><blockquote><p>union排序只需要在最后一个select上写order by 即可对整体union后的结果进行排序。</p></blockquote><h2 id="18-全文本搜索"><a href="#18-全文本搜索" class="headerlink" title="18.全文本搜索"></a>18.全文本搜索</h2><blockquote><p>简介：早期mysql只有MyISAM搜索引擎支持全文本搜索，而InnoDB搜索引擎不支持<br>——-mysql 5.6.4之后InnoDB也开始支持全文搜索<br>——-在MySQL 5.7.6之前，全文索引只支持英文全文索引，不支持中文全文索引<br>——-从MySQL 5.7.6开始，MySQL内置了ngram全文解析器，用来支持中文、日文、韩文分词。<br>——-我这里使用的版本是mysql5.7.28</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 查询表状态，搜索引擎一般默认Innodb</span><br><span class="line">show table status;</span><br><span class="line"></span><br><span class="line">-- 修改表address的搜索引擎为MyISAM或InnoDB</span><br><span class="line">ALTER TABLE &#96;address&#96; ENGINE&#x3D;INNODB;</span><br><span class="line"></span><br><span class="line">-- 查询mysql是否开启全文搜索,ft_min_word_len&#x3D;1为开启</span><br><span class="line">SHOW VARIABLES LIKE &#39;ft%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询mysql中文分词的词语最少，默认ngram_token_size &#x3D; 2，即一个中文词语两个字</span><br><span class="line">-- 如果需要搜索单字，就要把ngram_token_size设置为1</span><br><span class="line">SHOW VARIABLES LIKE &#39;ngram%&#39;;</span><br><span class="line"></span><br><span class="line">#查询address表的索引</span><br><span class="line">show index from address;</span><br><span class="line"></span><br><span class="line">-- 给address表的address字段添加全文索引，使用中文分词ngram</span><br><span class="line">CREATE FULLTEXT INDEX ft_address ON &#96;address&#96; ( &#96;address&#96; ) WITH PARSER ngram;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 在100万数据里全文检索，中文分词搜索 青州</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">address t </span><br><span class="line">WHERE</span><br><span class="line">MATCH ( address ) Against ( &quot;青州&quot; );</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-8.png" alt="image.png"></p><h3 id="使用查询扩展"><a href="#使用查询扩展" class="headerlink" title="使用查询扩展"></a>使用查询扩展</h3><blockquote><p>例如，我是用全文搜索<code>not</code>,得到如下一条结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">address t </span><br><span class="line">WHERE</span><br><span class="line">MATCH ( address ) Against ( &quot;not&quot; );</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-9.png" alt="image.png"></p><blockquote><p>使用查询扩展之后，可得到如下3条结果，第一行包括<code>not</code>所以等级最高，因为第二条和第三条都有第一条存在的rabbit所以也被搜索出来了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">address t </span><br><span class="line">WHERE</span><br><span class="line">MATCH ( address ) Against ( &quot;not&quot; with query expansion);</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-10.png" alt="image.png"></p><h3 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h3><blockquote><p>常用的全文检索模式有两种：<br>1、自然语言模式(NATURAL LANGUAGE MODE) ，<br>自然语言模式是MySQL 默认的全文检索模式。自然语言模式不能使用操作符，不能指定关键词必须出现或者必须不能出现等复杂查询。<br>2、BOOLEAN模式(BOOLEAN MODE)<br>BOOLEAN模式可以使用操作符，可以支持指定关键词必须出现或者必须不能出现或者关键词的权重高还是低等复杂查询。</p></blockquote><blockquote><p>例如，使用布尔模式查询包括rabbit但是不能包括not的结果,只有两条，包含rabbit和not的那条被过滤掉了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">address t </span><br><span class="line">WHERE</span><br><span class="line">MATCH ( address ) Against (&#39;+rabbit -not&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-11.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#39;apple banana&#39; </span><br><span class="line">无操作符，表示或，要么包含apple，要么包含banana</span><br><span class="line"></span><br><span class="line">&#39;+apple +juice&#39;</span><br><span class="line">必须同时包含两个词</span><br><span class="line"></span><br><span class="line">&#39;+apple macintosh&#39;</span><br><span class="line">必须包含apple，但是如果也包含macintosh的话，相关性会更高。</span><br><span class="line"></span><br><span class="line">&#39;+apple -macintosh&#39;</span><br><span class="line">必须包含apple，同时不能包含macintosh。</span><br><span class="line"></span><br><span class="line">&#39;+apple ~macintosh&#39;</span><br><span class="line">必须包含apple，但是如果也包含macintosh的话，相关性要比不包含macintosh的记录低。</span><br><span class="line"></span><br><span class="line">&#39;+apple +(&gt;juice &lt;pie)&#39;</span><br><span class="line">查询必须包含apple和juice或者apple和pie的记录，但是apple juice的相关性要比apple pie高。</span><br><span class="line"></span><br><span class="line">&#39;apple*&#39;</span><br><span class="line">查询包含以apple开头的单词的记录，如apple、apples、applet。</span><br><span class="line"></span><br><span class="line">&#39;&quot;some words&quot;&#39;</span><br><span class="line">使用双引号把要搜素的词括起来，效果类似于like &#39;%some words%&#39;，</span><br><span class="line">例如“some words of wisdom”会被匹配到，而“some noise words”就不会被匹配。</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-12.png" alt="image.png"></p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><blockquote><p>①只能在类型为CHAR、VARCHAR或者TEXT的字段上创建全文索引。<br>②全文索引只支持InnoDB和MyISAM引擎。<br>③MATCH (columnName) AGAINST (‘keywords’)。MATCH()函数使用的字段名，必须要与创建全文索引时指定的字段名一致。如上面的示例，MATCH (title,body)使用的字段名与全文索引ft_articles(title,body)定义的字段名一致。如果要对title或者body字段分别进行查询，就需要在title和body字段上分别创建新的全文索引。<br>④MATCH()函数使用的字段名只能是同一个表的字段，因为全文索引不能够跨多个表进行检索。<br>⑤如果要导入大数据集，使用先导入数据再在表上创建全文索引的方式要比先在表上创建全文索引再导入数据的方式快很多，所以全文索引是很影响TPS的。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/miracle-luna/p/11147859.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/miracle-luna/" target="_blank" rel="noopener">龙凌云端</a></a></p><h2 id="19-插入数据"><a href="#19-插入数据" class="headerlink" title="19.插入数据"></a>19.插入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 给学生表插入一条记录，标准插入语句</span><br><span class="line">INSERT INTO student (id,&#96;name&#96;,kemu,score,class_id) VALUES(11,&#39;小明&#39;,&#39;体育&#39;,100,4);</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>①id自增的话可以省略<br>②表后边的明确的给出列名及对应的顺序是安全的做法，即使表结构发生变化，此insert语句依然能够正常工作。<br>③如果表的定义允许，可以insert语句中省略某些列，省略的列必须满足以下某个条件，（一、该列定义允许为NULL。二、在标的定义中给出了默认值）<br>④可以使用<code>insert low_priority into</code> 降低insert语句的优先级，也适用于<code>update</code>和<code>delete</code></p></blockquote><h3 id="插入多个行"><a href="#插入多个行" class="headerlink" title="插入多个行"></a>插入多个行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 注意：这种方法比一个一个insert快</span><br><span class="line">INSERT INTO student ( id, &#96;name&#96;, kemu, score, class_id )</span><br><span class="line">VALUES</span><br><span class="line">( 12, &#39;小a&#39;, &#39;体育&#39;, 11, 1 ),</span><br><span class="line">( 13, &#39;小b&#39;, &#39;体育&#39;, 22, 2 ),</span><br><span class="line">( 14, &#39;小c&#39;, &#39;体育&#39;, 33, 3 );</span><br></pre></td></tr></table></figure><h2 id="20-更新和删除数据"><a href="#20-更新和删除数据" class="headerlink" title="20.更新和删除数据"></a>20.更新和删除数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 更改id&#x3D;11的数据的name&#x3D;小李</span><br><span class="line">UPDATE student </span><br><span class="line">SET NAME &#x3D; &#39;小李&#39; </span><br><span class="line">WHERE</span><br><span class="line">id &#x3D; 11;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 删除第id&#x3D;10的那一行</span><br><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line">student </span><br><span class="line">WHERE</span><br><span class="line">id &#x3D; 10;</span><br></pre></td></tr></table></figure><h3 id="更快的删除"><a href="#更快的删除" class="headerlink" title="更快的删除"></a>更快的删除</h3><blockquote><p>如果你想删除表中的所有数据，你可以使用<code>Truncate Table</code>,实际上他的意思是删除表，再重新创建一张表，而不是逐行删除表中的数据，所以速度较快。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE student;</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE &#96;t_class&#96;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;11-使用数据处理函数&quot;&gt;&lt;a href=&quot;#11-使用数据处理函数&quot; class=&quot;headerlink&quot; title=&quot;11.使用数据处理函数&quot;&gt;&lt;/a&gt;11.使用数据处理函数&lt;/h2&gt;&lt;h3 id=&quot;常用的文本处理函数&quot;&gt;&lt;a href=&quot;#常用的文本处理函数&quot; class=&quot;headerlink&quot; title=&quot;常用的文本处理函数&quot;&gt;&lt;/a&gt;常用的文本处理函数&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-2fb0ac38-1.png&quot; alt=&quot;22-2fb0ac38-1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://www.yunqing.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql必知必会读书笔记（1）</title>
    <link href="http://www.yunqing.xyz/article/3d0503d6.html"/>
    <id>http://www.yunqing.xyz/article/3d0503d6.html</id>
    <published>2020-03-22T10:56:44.000Z</published>
    <updated>2020-03-23T12:24:53.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mysql命令行客户端登录"><a href="#mysql命令行客户端登录" class="headerlink" title="mysql命令行客户端登录"></a>mysql命令行客户端登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 默认端口3306 主机本地localhost</span><br><span class="line">mysql -u root -p</span><br><span class="line">-- 写全的话</span><br><span class="line">mysql -u root -p -h localhost -P 3307</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>解释一下：-u 用户名为root     -p 密码待输入   -h 主机名localhost   -P 注意大写P ，意思是端口号3307</p></blockquote><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 展示所有数据库</span><br><span class="line">show databases;</span><br><span class="line">-- 使用数据库</span><br><span class="line">use kls;</span><br><span class="line">-- 展示数据库中所有的表</span><br><span class="line">show tables;</span><br><span class="line">-- 展示person表的字段</span><br><span class="line">show columns from person;</span><br><span class="line">-- show columns from 可以用describe代替</span><br><span class="line">describe person;</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-3d0503d6-1.png" alt="22-3d0503d6-1.png"></p><blockquote><p>mysql不区分大小写，但是为了易于阅读，开发人员经常把关键字大写，列和表名小写。(反正我是遵守不了，看大写的英文难受)</p></blockquote><h2 id="检索不同的行"><a href="#检索不同的行" class="headerlink" title="检索不同的行"></a>检索不同的行</h2><blockquote><p>如果查询学生表的年龄，每个年龄只出现一次</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct age from student;</span><br></pre></td></tr></table></figure><h2 id="限制返回结果数"><a href="#限制返回结果数" class="headerlink" title="限制返回结果数"></a>限制返回结果数</h2><blockquote><p>limit 5 表示从第1行开始，返回5条记录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from student limit 5;</span><br></pre></td></tr></table></figure><blockquote><p>limit 5, 5表示从第5行开始，返回5条数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from student limit 5,5;</span><br></pre></td></tr></table></figure><blockquote><p>另一种写法：limit 2 offset 3  代表从行3（也就是第四行）开始取2行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from student limit 2 offset 3;</span><br></pre></td></tr></table></figure><h2 id="排序order-by"><a href="#排序order-by" class="headerlink" title="排序order by"></a>排序order by</h2><blockquote><p>注意：order by 不仅可以按照检索的列排序，用非检索的列排序也是合法的。<br>注意：在多个列进行降序排序，需要在每个列指定DESC关键字，因为不指定的都默认ASC升序排列。<br>注意：order by 和 limit连用的时候，limit放在order by的后面。</p></blockquote><h2 id="between操作符"><a href="#between操作符" class="headerlink" title="between操作符"></a>between操作符</h2><blockquote><p>用来检索在两个数值之间的记录，例如查询在18-20岁之间的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student t where t.age between 18 and 20;</span><br></pre></td></tr></table></figure><h2 id="通配符-和"><a href="#通配符-和" class="headerlink" title="通配符 % 和 _"></a>通配符 % 和 _</h2><blockquote><p>mysql使用LIKE操作符跟%通配符进行模糊搜索。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询姓李的学生</span><br><span class="line">select name from student where name like &#39;李%&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>①注意：根据mysql的配置方式，搜索是要区分大小写的，例如模糊搜索中’jet%’是不会匹配JetPack的。<br>②注意’%jet%’表示匹配任何位置包括jet文本的值，而不论他之前或之后出现什么值。<br>③%表示搜索模式指定位置有0到多个任意字符。<br>④注意通配符_下划线，只能匹配1个字符，不能多也不能少。<br>⑤%不会匹配NULL行，即使是like ‘%’也不会匹配NULL行。<br>⑥通配符一般处理时间比其他搜索要长，其他操作能达到尽量不要使用，使用通配符时候除非有绝对必要，否则不要把通配符用在开始处，因为放在开始处，搜索会最慢。</p></blockquote><h2 id="使用mysql正则表达式"><a href="#使用mysql正则表达式" class="headerlink" title="使用mysql正则表达式"></a>使用mysql正则表达式</h2><blockquote><p>mysql使用 <code>regexp</code> 表示后面跟的内容为正则表达式</p><p>###基本字符匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 正则匹配姓名为小刚的行</span><br><span class="line">select * from student where name regexp &#39;小刚&#39;；</span><br></pre></td></tr></table></figure><blockquote><p><code>.</code>点号是正则表达式中的一个重要字符，表示匹配任意一个字符。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 正则匹配0前面有任意一个字符的行,例如10、20等</span><br><span class="line">select * from student where age regexp &#39;.0&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>正则表达式不区分大小写，为了区分大小写可以使用binary关键字</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 下面例子则匹配jet 1000 或者 jet a000等</span><br><span class="line">... where name regexp binary &#39;jet .000&#39;;</span><br></pre></td></tr></table></figure><h3 id="进行OR匹配"><a href="#进行OR匹配" class="headerlink" title="进行OR匹配"></a>进行OR匹配</h3><blockquote><p>正则表达式利用<code>|</code>来表示or操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 匹配名字中包括小明或小李的</span><br><span class="line">... where name regexp &#39;小明|小李&#39;;</span><br></pre></td></tr></table></figure><h3 id="匹配几个字符之一"><a href="#匹配几个字符之一" class="headerlink" title="匹配几个字符之一"></a>匹配几个字符之一</h3><blockquote><p>使用<code>[]</code>包裹的字符，表示匹配其中之一</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 正则匹配包括1或2或3的学号</span><br><span class="line">... where id regexp &#39;[123]&#39;；</span><br></pre></td></tr></table></figure><blockquote><p>解释：<code>[123]</code>是<code>[1|2|3]</code>的缩写，其实<code>[]</code>就是正则中另一种形式的or语句，为什么加<code>[]</code>是因为如下：</p></blockquote><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-3d0503d6-2.png" alt="22-3d0503d6-2.png"></p><blockquote><p>字符集合也可以被否定，即匹配除指定字符之外的任何东西，即<code>[^123]</code>匹配除123这三个字符之外的任何东西。</p></blockquote><h2 id="正则匹配范围"><a href="#正则匹配范围" class="headerlink" title="正则匹配范围"></a>正则匹配范围</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 例如</span><br><span class="line">[0-9]</span><br><span class="line">[a-z]</span><br><span class="line">[1-3]</span><br><span class="line">[a-e]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 将会匹配到1 Ton anvil 或 .5 ton anvil等 </span><br><span class="line">... where name regexp &#39;[1-5] Ton&#39;；</span><br></pre></td></tr></table></figure><h3 id="正则匹配特殊字符-转义"><a href="#正则匹配特殊字符-转义" class="headerlink" title="正则匹配特殊字符\\转义"></a>正则匹配特殊字符<code>\\</code>转义</h3><blockquote><p>如果需要转义<code>\</code>本身，需要使用<code>\\\</code><br>为什么正则表达式用两个<code>\\</code>呢？因为在mysql当中，mysql自己解释一个，正则表达式库解释一个。</p></blockquote><h3 id="正则匹配字符类"><a href="#正则匹配字符类" class="headerlink" title="正则匹配字符类"></a>正则匹配字符类</h3><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-3d0503d6-3.png" alt="22-3d0503d6-3"></p><h3 id="正则匹配多个实例"><a href="#正则匹配多个实例" class="headerlink" title="正则匹配多个实例"></a>正则匹配多个实例</h3><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-3d0503d6-4.png" alt="22-3d0503d6-4"><br><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-3d0503d6-5.png" alt="22-3d0503d6-5.png"></p><h3 id="正则定位符"><a href="#正则定位符" class="headerlink" title="正则定位符"></a>正则定位符</h3><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-3d0503d6-6.png" alt="22-3d0503d6-6"></p><blockquote><p>例如我们想搜索一个以<code>.</code>点号或者数字开头的结果，怎么办？<br>[0-9\.]是不行的，因为他会在文本的任意位置开始查找，解决办法就是使用定位符^从文本开始位置查找。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... where name regexp &#39;^[0-9\\.]&#39;;</span><br></pre></td></tr></table></figure><h2 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h2><blockquote><p>简单来说，数据库中存储的结果不是我们最终想要的，例如省市区分别存储在3列中，我们需要连在一列显示。</p></blockquote><h3 id="拼接字段Concat-函数"><a href="#拼接字段Concat-函数" class="headerlink" title="拼接字段Concat()函数"></a>拼接字段Concat()函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 将first_name、 ( 、last_name、和）这四个字符串拼接起来，例如: 李 （小明）</span><br><span class="line">select Concat(first_name, &#39; (&#39; , last_name, &#39;)&#39;) as name from student;</span><br></pre></td></tr></table></figure><h3 id="Trim-、LTrim-、RTrim-函数"><a href="#Trim-、LTrim-、RTrim-函数" class="headerlink" title="Trim()、LTrim() 、RTrim()函数"></a><code>Trim()</code>、<code>LTrim()</code> 、<code>RTrim()</code>函数</h3><blockquote><p>分别为去掉左右两边的空格、去掉左边空格、去掉右边空格</p></blockquote><h2 id="如何测试计算？"><a href="#如何测试计算？" class="headerlink" title="如何测试计算？"></a>如何测试计算？</h2><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-3d0503d6-7.png" alt="22-3d0503d6-7"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 例如查询当前时间</span><br><span class="line">select  now();</span><br></pre></td></tr></table></figure><p><img src="https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/article/202003/22-3d0503d6-8.png" alt="22-3d0503d6-8"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql命令行客户端登录&quot;&gt;&lt;a href=&quot;#mysql命令行客户端登录&quot; class=&quot;headerlink&quot; title=&quot;mysql命令行客户端登录&quot;&gt;&lt;/a&gt;mysql命令行客户端登录&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-- 默认端口3306 主机本地localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -u root -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- 写全的话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -u root -p -h localhost -P 3307&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://www.yunqing.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>第二篇文章致敬梦想</title>
    <link href="http://www.yunqing.xyz/article/6b624713.html"/>
    <id>http://www.yunqing.xyz/article/6b624713.html</id>
    <published>2020-03-18T12:48:23.000Z</published>
    <updated>2020-03-22T11:06:10.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><del>毫无疑问，首篇文章祭给Hello World！</del></p><a id="more"></a><blockquote><p>超喜欢Nike这个视频，谨以此献给我的读者们，我们以此共勉，向着心中的“乌托邦”，未来的康庄大道，前进！</p><p>梦想还是要有的，万一实现了呢？</p><p>梦想是一定要有的，我们肯定能实现！</p><p>问题不是自己的梦想是否疯狂，而是够不够疯狂！</p></blockquote><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"https://yunqing-img.oss-cn-beijing.aliyuncs.com/video/dream-crazy.mp4","pic":"https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/dream-img.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;毫无疑问，首篇文章祭给Hello World！&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="梦想" scheme="http://www.yunqing.xyz/tags/%E6%A2%A6%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.yunqing.xyz/article/4a17b156.html"/>
    <id>http://www.yunqing.xyz/article/4a17b156.html</id>
    <published>2020-03-17T13:41:23.000Z</published>
    <updated>2020-03-21T16:27:02.331Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a> </p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a> </p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Hello World" scheme="http://www.yunqing.xyz/tags/Hello-World/"/>
    
  </entry>
  
</feed>
