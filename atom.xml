<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MY WORLD</title>
  
  <subtitle>贩卖快乐！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yunqing.xyz/"/>
  <updated>2020-03-22T12:58:03.823Z</updated>
  <id>http://www.yunqing.xyz/</id>
  
  <author>
    <name>云晴</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql必知必会读书笔记（2）</title>
    <link href="http://www.yunqing.xyz/article/2fb0ac38.html"/>
    <id>http://www.yunqing.xyz/article/2fb0ac38.html</id>
    <published>2020-03-22T11:06:52.000Z</published>
    <updated>2020-03-22T12:58:03.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="11-使用数据处理函数"><a href="#11-使用数据处理函数" class="headerlink" title="11.使用数据处理函数"></a>11.使用数据处理函数</h2><h3 id="常用的文本处理函数"><a href="#常用的文本处理函数" class="headerlink" title="常用的文本处理函数"></a>常用的文本处理函数</h3><p><img src="https://upload-images.jianshu.io/upload_images/8020666-c82cc68d7f7e3442.png" alt=""></p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/8020666-48d48c8e706bb8be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>对Soundex()做一个解释：此函数是对任意文本串转化成其发音的算法。所以只要是发音类似的结果都会被查询出来。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 例如学生名字为 Y.Lee录入的时候录入错误，录成 Y.Lie 这时候如下查找会查找不到。</span><br><span class="line">select name from student where name &#x3D; &#39;Y.Lee&#39;;</span><br><span class="line">#如下使用Soundex()函数就能查找出来</span><br><span class="line">select name from student where Soundex(name) &#x3D; Soundex(&#39;Y.Lee&#39;);</span><br></pre></td></tr></table></figure><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><p><img src="https://upload-images.jianshu.io/upload_images/8020666-1994b6dd02c36227.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>注意：当使用where条件搜索日期为某一天的记录时候，通常这样写…where date = ‘2020-02-02’;但是这种写法并不严谨，因为如果当数据库date类型为datetime的时候，表中数据会有时间值00:00:00则此时上面的写法就不严谨了，需要用时间处理函数取日期部分，我们可以这样写：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... where Date(date) &#x3D; &#39;2020-02-02&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>例如：我们需要获取2020年2月份的所有订单？如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 第一种解法：需要知道2月份有多少天，比如2020年闰年29天</span><br><span class="line">...where Date(order_date) between &#39;2020-02-01&#39;  and &#39;2020-02-29&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>上面用到between关键字，可以查询2月1到29号的2月份区间的订单，缺点是必须知道2月有多少天，所以我们可以如下写，根本不用关心2月份有多少天。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 注意用到了Year()函数和Month()函数</span><br><span class="line">...where Year(order_date) &#x3D; 2020 and Month(order_date) &#x3D; 2;</span><br></pre></td></tr></table></figure><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><p><img src="https://upload-images.jianshu.io/upload_images/8020666-c57d11f5051cae0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="12-汇总数据"><a href="#12-汇总数据" class="headerlink" title="12.汇总数据"></a>12.汇总数据</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p><img src="https://upload-images.jianshu.io/upload_images/8020666-9f55a8d187875c33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>注意： AVG()函数只能求特定一列的平均值并且会忽略列值为NULL的行</p></blockquote><blockquote><p>COUNT(<em>)返回总行数，包含NULL值； COUNT(列名)返回总行数，不含NULL值； DISTINCT COUNT(</em>)返回总行数，去除重复且不含NULL值,COUNT(1)和count(*)返回结果一致。</p></blockquote><blockquote><p>Max()函数、Min()函数、Sum()函数都忽略列值为NULL的行</p></blockquote><h3 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h3><blockquote><p>正如标题字面意思聚集不同值即为把<code>distinct</code>关键字用于聚集函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 求不同价格商品的平均值</span><br><span class="line">select avg(distinct prod_price) from products;</span><br></pre></td></tr></table></figure><h2 id="13-分组数据"><a href="#13-分组数据" class="headerlink" title="13.分组数据"></a>13.分组数据</h2><p>关于Group by 分组的一些规定：<br>①group by 字句可以包含任意数量的列，这使得能对分组进行嵌套，为分组提供更细致的控制。<br>②如果在Group By子句中嵌套了分组,数据将在最后指定的分组上进行汇总。换句话说,在建立分组时，指定的所有列都一起计算(不能从个别的列中取回数据)。<br>③Group By子句中列出的每一列都必须是检索列(或者有效的表达式,注意不能是聚集函数)。如果在SELECT中使用了检索列(或者表达式),则在Group By子句中使用相同的表达式,不能使用别名。<br>④除聚集计算语句外,SELECT语句中的每一列都必须在Group By中给出。<br>⑤如果分组列中包含具有Null值的行,则Null将作为一个分组返回,如果列中有多行Null，他们将作为一个分组返回<br>⑥Group By必须出现在Where子句之后,Order By子句之前。</p><h3 id="WITH-ROLLUP-关键字进行分组汇总"><a href="#WITH-ROLLUP-关键字进行分组汇总" class="headerlink" title="WITH ROLLUP 关键字进行分组汇总"></a>WITH ROLLUP 关键字进行分组汇总</h3><blockquote><p>使用<code>with ROLLUP</code>关键字，可以得到每个分组以及每个分组汇总级别(针对每个分组)的值。如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">&#96;name&#96;,</span><br><span class="line">count( * ) AS num </span><br><span class="line">FROM</span><br><span class="line">student </span><br><span class="line">GROUP BY</span><br><span class="line">&#96;name&#96; WITH ROLLUP;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-43ef2d48bac134eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="对分组进行过滤-Having"><a href="#对分组进行过滤-Having" class="headerlink" title="对分组进行过滤 Having"></a>对分组进行过滤 Having</h3><blockquote><p>having是对分组后的数据进行过滤，而where是对分组之前的数据进行过滤。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">&#96;name&#96;,</span><br><span class="line">count( * ) AS num </span><br><span class="line">FROM</span><br><span class="line">student </span><br><span class="line">WHERE</span><br><span class="line">&#96;name&#96; &lt;&gt; &#39;xm&#39; </span><br><span class="line">GROUP BY</span><br><span class="line">&#96;name&#96; </span><br><span class="line">HAVING</span><br><span class="line">count( * ) &gt; 1;</span><br></pre></td></tr></table></figure><blockquote><p>where过滤掉name=’xm’的数据，然后having再过滤掉出满足数量大于1的分组。</p></blockquote><blockquote><p>注意在使用<code>group by</code>进行分组的时候，也使用<code>order by</code>进行排序，这是保证数据正确排序的唯一方法，千万不要仅仅依赖<code>group by</code>排序数据。</p></blockquote><p>小结：列出select子句的顺序：<br><code>select</code><br><code>from</code><br><code>where</code><br><code>group by</code><br><code>having</code><br><code>order by</code><br><code>limit</code></p><h2 id="14-使用子查询"><a href="#14-使用子查询" class="headerlink" title="14.使用子查询"></a>14.使用子查询</h2><p>例如：从<code>customers</code>客户表中检索客户列表<br>对于检索出的每个客户，统计其在<code>orders</code>订单表中的订单数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select &#96;name&#96;，state,</span><br><span class="line">(select count(*) from orders where orders.cust_id &#x3D; customers.cust_id) as orders</span><br><span class="line">from customers </span><br><span class="line">order by &#96;name&#96;;</span><br></pre></td></tr></table></figure><h2 id="15-联表查询"><a href="#15-联表查询" class="headerlink" title="15.联表查询"></a>15.联表查询</h2><h3 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h3><p>创建联结非常简单，规定要联结的表以及他们如何关联即可。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">t1.id,</span><br><span class="line">t1.&#96;name&#96; className,</span><br><span class="line">t2.&#96;name&#96; AS studentName,</span><br><span class="line">t2.score </span><br><span class="line">FROM</span><br><span class="line">t_class t1,</span><br><span class="line">student t2 </span><br><span class="line">WHERE</span><br><span class="line">t1.id &#x3D; t2.class_id </span><br><span class="line">ORDER BY</span><br><span class="line">t1.id,</span><br><span class="line">t2.score</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-f970893637d28f81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>注意：联结表查询的联结条件很重要，上面这段sql的联结条件是where 班级表的id = 学生表的班级id<br>如果不写联结条件的话，就会生成<code>笛卡尔积</code>。<br><code>笛卡尔积</code>就是联结的两张表，用第一张表每一行去联结第二张表每一行，因为没有联结条件，所以就会生成<code>笛卡尔积</code><br>例如：上面的联结查询如果不写where联结条件的话,就会得到<code>笛卡尔积</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">t1.id,</span><br><span class="line">t1.&#96;name&#96; className,</span><br><span class="line">t2.&#96;name&#96; AS studentName,</span><br><span class="line">t2.score </span><br><span class="line">FROM</span><br><span class="line">t_class t1,</span><br><span class="line">student t2 </span><br><span class="line">ORDER BY</span><br><span class="line">t1.id,</span><br><span class="line">t2.score</span><br></pre></td></tr></table></figure><h3 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h3><p>目前为止所用的联结称为<code>等值联结</code>，它基于两个表之间的相等进行联结，这种联结也称为<code>内联</code>，对于这种联结可以使用一种新的推荐语法来写，就是<code>inner join ...  on</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 两个表的联结条件是ON</span><br><span class="line">SELECT</span><br><span class="line">t1.id,</span><br><span class="line">t1.&#96;name&#96; className,</span><br><span class="line">t2.&#96;name&#96; AS studentName,</span><br><span class="line">t2.score </span><br><span class="line">FROM</span><br><span class="line">t_class t1</span><br><span class="line">INNER JOIN student t2 ON t1.id &#x3D; t2.class_id </span><br><span class="line">ORDER BY</span><br><span class="line">t1.id,</span><br><span class="line">t2.score</span><br></pre></td></tr></table></figure><h3 id="联结多张表"><a href="#联结多张表" class="headerlink" title="联结多张表"></a>联结多张表</h3><blockquote><p>注意：mysql对于一条select 语句中可以联结的表的数量没有限制，但是联结的表越多，性能下降越厉害，所以我们应该考虑必要的表进行联结，尽量减少联结的表的个数，阿里巴巴java开发手册中也写到，超过3张表禁止join.</p></blockquote><h2 id="16-创建高级联结"><a href="#16-创建高级联结" class="headerlink" title="16.创建高级联结"></a>16.创建高级联结</h2><h3 id="使用别名是一种很好的习惯（表别名、列别名）"><a href="#使用别名是一种很好的习惯（表别名、列别名）" class="headerlink" title="使用别名是一种很好的习惯（表别名、列别名）"></a>使用别名是一种很好的习惯（表别名、列别名）</h3><h3 id="使用不同类型的联结"><a href="#使用不同类型的联结" class="headerlink" title="使用不同类型的联结"></a>使用不同类型的联结</h3><p><strong>1.自联结</strong></p><blockquote><p>例如：你的id为a的货品有质量问题，所以你想知道a货品的供货商的其他商品是否也有问题，查询出货品a所属供货商的所有货品。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 使用子查询</span><br><span class="line">SELECT</span><br><span class="line">t1.prod_id,</span><br><span class="line">t1.prod_name </span><br><span class="line">FROM</span><br><span class="line">products t1 </span><br><span class="line">WHERE</span><br><span class="line">t1.ghs_id &#x3D; ( SELECT t2.ghs.id FROM products t2 WHERE t2.prod_id &#x3D; &#39;a&#39;; )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 使用自联结查询</span><br><span class="line">SELECT</span><br><span class="line">t1.prod_id,</span><br><span class="line">t1.prod_name </span><br><span class="line">FROM</span><br><span class="line">products t1,</span><br><span class="line">products t2 </span><br><span class="line">WHERE</span><br><span class="line">t1.ghs_id &#x3D; t2.ghs_id </span><br><span class="line">AND t1.prod_id &#x3D; &#39;a&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>使用自联结而不是子查询？自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句，虽然查询结果是相同的，但是有时候处理联结的速度比子查询快得多。</p></blockquote><p><strong>2.外联结(左外联结、右外联结)</strong></p><blockquote><p>在使用<code>outer join</code>语法时候必须指定<code>left</code> 或者  <code>right</code> 关键字来确定包括其所有行的表，实际上外连接经常被我们简写成<code>left join... on</code>和<code>right join...on</code></p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>①注意所使用的联结类型。一般我们使用内部联结，但是使用外联结也是有效的。<br>②保证使用正确的联结条件，否则将返回不正确的数据。<br>③应该总是提供联结条件on….不然会得出<code>笛卡尔积</code><br>④在一个联结中可以包含多个表，甚至对于每个联结可以使用不同的联结类型，虽然是合法的，但是应该在一起测试前，分别测试每个联结，这将使故障排除更简单。</p></blockquote><h2 id="17-组合查询UNION"><a href="#17-组合查询UNION" class="headerlink" title="17.组合查询UNION"></a>17.组合查询UNION</h2><blockquote><p>有两种情况需要用到组合查询：<br>①在单个查询中从不同的表返回类似结构的数据<br>②对单个表执行多个查询，按单个查询返回结果</p></blockquote><p><code>union相当于拼接两个select的结果，每一个where ....or ...都能拆成union组合查询</code></p><blockquote><p><code>union</code>使用规则：<br>①union必须由两条或以上的select语句组成<br>②union中的每个查询必须包含相同的列、表达式或聚集函数<code>（注意：列的顺序也必须相同）</code><br>③列数据类型必须兼容，类型不必完全相同，但是必须DBMS可以隐式转换的类型。</p></blockquote><h3 id="UNION默认取消重复行（保留一条），如果返回所有即使重复可以用UNION-ALL"><a href="#UNION默认取消重复行（保留一条），如果返回所有即使重复可以用UNION-ALL" class="headerlink" title="UNION默认取消重复行（保留一条），如果返回所有即使重复可以用UNION ALL"></a>UNION默认取消重复行（保留一条），如果返回所有即使重复可以用UNION ALL</h3><blockquote><p>union排序只需要在最后一个select上写order by 即可对整体union后的结果进行排序。</p></blockquote><h2 id="18-全文本搜索"><a href="#18-全文本搜索" class="headerlink" title="18.全文本搜索"></a>18.全文本搜索</h2><blockquote><p>简介：早期mysql只有MyISAM搜索引擎支持全文本搜索，而InnoDB搜索引擎不支持<br>——-mysql 5.6.4之后InnoDB也开始支持全文搜索<br>——-在MySQL 5.7.6之前，全文索引只支持英文全文索引，不支持中文全文索引<br>——-从MySQL 5.7.6开始，MySQL内置了ngram全文解析器，用来支持中文、日文、韩文分词。<br>——-我这里使用的版本是mysql5.7.28</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 查询表状态，搜索引擎一般默认Innodb</span><br><span class="line">show table status;</span><br><span class="line"></span><br><span class="line">-- 修改表address的搜索引擎为MyISAM或InnoDB</span><br><span class="line">ALTER TABLE &#96;address&#96; ENGINE&#x3D;INNODB;</span><br><span class="line"></span><br><span class="line">-- 查询mysql是否开启全文搜索,ft_min_word_len&#x3D;1为开启</span><br><span class="line">SHOW VARIABLES LIKE &#39;ft%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询mysql中文分词的词语最少，默认ngram_token_size &#x3D; 2，即一个中文词语两个字</span><br><span class="line">-- 如果需要搜索单字，就要把ngram_token_size设置为1</span><br><span class="line">SHOW VARIABLES LIKE &#39;ngram%&#39;;</span><br><span class="line"></span><br><span class="line">#查询address表的索引</span><br><span class="line">show index from address;</span><br><span class="line"></span><br><span class="line">-- 给address表的address字段添加全文索引，使用中文分词ngram</span><br><span class="line">CREATE FULLTEXT INDEX ft_address ON &#96;address&#96; ( &#96;address&#96; ) WITH PARSER ngram;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 在100万数据里全文检索，中文分词搜索 青州</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">address t </span><br><span class="line">WHERE</span><br><span class="line">MATCH ( address ) Against ( &quot;青州&quot; );</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-1bc0ef0532943edd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="使用查询扩展"><a href="#使用查询扩展" class="headerlink" title="使用查询扩展"></a>使用查询扩展</h3><blockquote><p>例如，我是用全文搜索<code>not</code>,得到如下一条结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">address t </span><br><span class="line">WHERE</span><br><span class="line">MATCH ( address ) Against ( &quot;not&quot; );</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-d192cac8314dcf97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>使用查询扩展之后，可得到如下3条结果，第一行包括<code>not</code>所以等级最高，因为第二条和第三条都有第一条存在的rabbit所以也被搜索出来了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">address t </span><br><span class="line">WHERE</span><br><span class="line">MATCH ( address ) Against ( &quot;not&quot; with query expansion);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-b94f1d27c3199f5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h3><blockquote><p>常用的全文检索模式有两种：<br>1、自然语言模式(NATURAL LANGUAGE MODE) ，<br>自然语言模式是MySQL 默认的全文检索模式。自然语言模式不能使用操作符，不能指定关键词必须出现或者必须不能出现等复杂查询。<br>2、BOOLEAN模式(BOOLEAN MODE)<br>BOOLEAN模式可以使用操作符，可以支持指定关键词必须出现或者必须不能出现或者关键词的权重高还是低等复杂查询。</p></blockquote><blockquote><p>例如，使用布尔模式查询包括rabbit但是不能包括not的结果,只有两条，包含rabbit和not的那条被过滤掉了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">address t </span><br><span class="line">WHERE</span><br><span class="line">MATCH ( address ) Against (&#39;+rabbit -not&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-882cc969a6ea4e1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#39;apple banana&#39; </span><br><span class="line">无操作符，表示或，要么包含apple，要么包含banana</span><br><span class="line"></span><br><span class="line">&#39;+apple +juice&#39;</span><br><span class="line">必须同时包含两个词</span><br><span class="line"></span><br><span class="line">&#39;+apple macintosh&#39;</span><br><span class="line">必须包含apple，但是如果也包含macintosh的话，相关性会更高。</span><br><span class="line"></span><br><span class="line">&#39;+apple -macintosh&#39;</span><br><span class="line">必须包含apple，同时不能包含macintosh。</span><br><span class="line"></span><br><span class="line">&#39;+apple ~macintosh&#39;</span><br><span class="line">必须包含apple，但是如果也包含macintosh的话，相关性要比不包含macintosh的记录低。</span><br><span class="line"></span><br><span class="line">&#39;+apple +(&gt;juice &lt;pie)&#39;</span><br><span class="line">查询必须包含apple和juice或者apple和pie的记录，但是apple juice的相关性要比apple pie高。</span><br><span class="line"></span><br><span class="line">&#39;apple*&#39;</span><br><span class="line">查询包含以apple开头的单词的记录，如apple、apples、applet。</span><br><span class="line"></span><br><span class="line">&#39;&quot;some words&quot;&#39;</span><br><span class="line">使用双引号把要搜素的词括起来，效果类似于like &#39;%some words%&#39;，</span><br><span class="line">例如“some words of wisdom”会被匹配到，而“some noise words”就不会被匹配。</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-fba8fabca7a37c9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><blockquote><p>①只能在类型为CHAR、VARCHAR或者TEXT的字段上创建全文索引。<br>②全文索引只支持InnoDB和MyISAM引擎。<br>③MATCH (columnName) AGAINST (‘keywords’)。MATCH()函数使用的字段名，必须要与创建全文索引时指定的字段名一致。如上面的示例，MATCH (title,body)使用的字段名与全文索引ft_articles(title,body)定义的字段名一致。如果要对title或者body字段分别进行查询，就需要在title和body字段上分别创建新的全文索引。<br>④MATCH()函数使用的字段名只能是同一个表的字段，因为全文索引不能够跨多个表进行检索。<br>⑤如果要导入大数据集，使用先导入数据再在表上创建全文索引的方式要比先在表上创建全文索引再导入数据的方式快很多，所以全文索引是很影响TPS的。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/miracle-luna/p/11147859.html" target="_blank" rel="noopener">https://www.cnblogs.com/miracle-luna/p/11147859.html</a></p><h2 id="19-插入数据"><a href="#19-插入数据" class="headerlink" title="19.插入数据"></a>19.插入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 给学生表插入一条记录，标准插入语句</span><br><span class="line">INSERT INTO student (id,&#96;name&#96;,kemu,score,class_id) VALUES(11,&#39;小明&#39;,&#39;体育&#39;,100,4);</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>①id自增的话可以省略<br>②表后边的明确的给出列名及对应的顺序是安全的做法，即使表结构发生变化，此insert语句依然能够正常工作。<br>③如果表的定义允许，可以insert语句中省略某些列，省略的列必须满足以下某个条件，（一、该列定义允许为NULL。二、在标的定义中给出了默认值）<br>④可以使用<code>insert low_priority into</code> 降低insert语句的优先级，也适用于<code>update</code>和<code>delete</code></p></blockquote><h3 id="插入多个行"><a href="#插入多个行" class="headerlink" title="插入多个行"></a>插入多个行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 注意：这种方法比一个一个insert快</span><br><span class="line">INSERT INTO student ( id, &#96;name&#96;, kemu, score, class_id )</span><br><span class="line">VALUES</span><br><span class="line">( 12, &#39;小a&#39;, &#39;体育&#39;, 11, 1 ),</span><br><span class="line">( 13, &#39;小b&#39;, &#39;体育&#39;, 22, 2 ),</span><br><span class="line">( 14, &#39;小c&#39;, &#39;体育&#39;, 33, 3 );</span><br></pre></td></tr></table></figure><h2 id="20-更新和删除数据"><a href="#20-更新和删除数据" class="headerlink" title="20.更新和删除数据"></a>20.更新和删除数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 更改id&#x3D;11的数据的name&#x3D;小李</span><br><span class="line">UPDATE student </span><br><span class="line">SET NAME &#x3D; &#39;小李&#39; </span><br><span class="line">WHERE</span><br><span class="line">id &#x3D; 11;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 删除第id&#x3D;10的那一行</span><br><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line">student </span><br><span class="line">WHERE</span><br><span class="line">id &#x3D; 10;</span><br></pre></td></tr></table></figure><h3 id="更快的删除"><a href="#更快的删除" class="headerlink" title="更快的删除"></a>更快的删除</h3><blockquote><p>如果你想删除表中的所有数据，你可以使用<code>Truncate Table</code>,实际上他的意思是删除表，再重新创建一张表，而不是逐行删除表中的数据，所以速度较快。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE student;</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE &#96;t_class&#96;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;11-使用数据处理函数&quot;&gt;&lt;a href=&quot;#11-使用数据处理函数&quot; class=&quot;headerlink&quot; title=&quot;11.使用数据处理函数&quot;&gt;&lt;/a&gt;11.使用数据处理函数&lt;/h2&gt;&lt;h3 id=&quot;常用的文本处理函数&quot;&gt;&lt;a href=&quot;#常用的文本处理函数&quot; class=&quot;headerlink&quot; title=&quot;常用的文本处理函数&quot;&gt;&lt;/a&gt;常用的文本处理函数&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8020666-c82cc68d7f7e3442.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://www.yunqing.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql必知必会读书笔记（1）</title>
    <link href="http://www.yunqing.xyz/article/3d0503d6.html"/>
    <id>http://www.yunqing.xyz/article/3d0503d6.html</id>
    <published>2020-03-22T10:56:44.000Z</published>
    <updated>2020-03-22T11:05:59.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mysql命令行客户端登录"><a href="#mysql命令行客户端登录" class="headerlink" title="mysql命令行客户端登录"></a>mysql命令行客户端登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#默认端口3306 主机本地localhost</span><br><span class="line">mysql -u root -p</span><br><span class="line">#写全的话</span><br><span class="line">mysql -u root -p -h localhost -P 3307</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>解释一下：-u 用户名为root     -p 密码待输入   -h 主机名localhost   -P 注意大写P ，意思是端口号3307</p></blockquote><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#展示所有数据库</span><br><span class="line">show databases;</span><br><span class="line">#使用数据库</span><br><span class="line">use kls;</span><br><span class="line">#展示数据库中所有的表</span><br><span class="line">show tables;</span><br><span class="line">#展示person表的字段</span><br><span class="line">show columns from person;</span><br><span class="line">#show columns from 可以用describe代替</span><br><span class="line">describe person;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-e1df2f897ed79c9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>mysql不区分大小写，但是为了易于阅读，开发人员经常把关键字大写，列和表名小写。(反正我是遵守不了，看大写的英文难受)</p></blockquote><h2 id="检索不同的行"><a href="#检索不同的行" class="headerlink" title="检索不同的行"></a>检索不同的行</h2><blockquote><p>如果查询学生表的年龄，每个年龄只出现一次</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct age from student;</span><br></pre></td></tr></table></figure><h2 id="限制返回结果数"><a href="#限制返回结果数" class="headerlink" title="限制返回结果数"></a>限制返回结果数</h2><blockquote><p>limit 5 表示从第1行开始，返回5条记录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from student limit 5;</span><br></pre></td></tr></table></figure><blockquote><p>limit 5, 5表示从第5行开始，返回5条数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from student limit 5,5;</span><br></pre></td></tr></table></figure><blockquote><p>另一种写法：limit 2 offset 3  代表从行3（也就是第四行）开始取2行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from student limit 2 offset 3;</span><br></pre></td></tr></table></figure><h2 id="排序order-by"><a href="#排序order-by" class="headerlink" title="排序order by"></a>排序order by</h2><blockquote><p>注意：order by 不仅可以按照检索的列排序，用非检索的列排序也是合法的。<br>注意：在多个列进行降序排序，需要在每个列指定DESC关键字，因为不指定的都默认ASC升序排列。<br>注意：order by 和 limit连用的时候，limit放在order by的后面。</p></blockquote><h2 id="between操作符"><a href="#between操作符" class="headerlink" title="between操作符"></a>between操作符</h2><blockquote><p>用来检索在两个数值之间的记录，例如查询在18-20岁之间的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student t where t.age between 18 and 20;</span><br></pre></td></tr></table></figure><h2 id="通配符-和"><a href="#通配符-和" class="headerlink" title="通配符 % 和 _"></a>通配符 % 和 _</h2><blockquote><p>mysql使用LIKE操作符跟%通配符进行模糊搜索。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询姓李的学生</span><br><span class="line">select name from student where name like &#39;李%&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>①注意：根据mysql的配置方式，搜索是要区分大小写的，例如模糊搜索中’jet%’是不会匹配JetPack的。<br>②注意’%jet%’表示匹配任何位置包括jet文本的值，而不论他之前或之后出现什么值。<br>③%表示搜索模式指定位置有0到多个任意字符。<br>④注意通配符_下划线，只能匹配1个字符，不能多也不能少。<br>⑤%不会匹配NULL行，即使是like ‘%’也不会匹配NULL行。<br>⑥通配符一般处理时间比其他搜索要长，其他操作能达到尽量不要使用，使用通配符时候除非有绝对必要，否则不要把通配符用在开始处，因为放在开始处，搜索会最慢。</p></blockquote><h2 id="使用mysql正则表达式"><a href="#使用mysql正则表达式" class="headerlink" title="使用mysql正则表达式"></a>使用mysql正则表达式</h2><blockquote><p>mysql使用 <code>regexp</code> 表示后面跟的内容为正则表达式<br>###基本字符匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#正则匹配姓名为小刚的行</span><br><span class="line">select * from student where name regexp &#39;小刚&#39;；</span><br></pre></td></tr></table></figure><blockquote><p>. 点号是正则表达式中的一个重要字符，表示匹配任意一个字符。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#正则匹配0前面有任意一个字符的行,例如10、20等</span><br><span class="line">select * from student where age regexp &#39;.0&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>正则表达式不区分大小写，为了区分大小写可以使用binary关键字</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#下面例子则匹配jet 1000 或者 jet a000等</span><br><span class="line">... where name regexp binary &#39;jet .000&#39;;</span><br></pre></td></tr></table></figure><h3 id="进行OR匹配"><a href="#进行OR匹配" class="headerlink" title="进行OR匹配"></a>进行OR匹配</h3><blockquote><p>正则表达式利用<code>|</code>来表示or操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#匹配名字中包括小明或小李的</span><br><span class="line">... where name regexp &#39;小明|小李&#39;;</span><br></pre></td></tr></table></figure><h3 id="匹配几个字符之一"><a href="#匹配几个字符之一" class="headerlink" title="匹配几个字符之一"></a>匹配几个字符之一</h3><blockquote><p>使用<code>[]</code>包裹的字符，表示匹配其中之一</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#正则匹配包括1或2或3的学号</span><br><span class="line">... where id regexp &#39;[123]&#39;；</span><br></pre></td></tr></table></figure><blockquote><p>解释：<code>[123]</code>是<code>[1|2|3]</code>的缩写，其实<code>[]</code>就是正则中另一种形式的or语句，为什么加<code>[]</code>是因为如下：</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/8020666-32f4ce908bd48f1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>字符集合也可以被否定，即匹配除指定字符之外的任何东西，即<code>[^123]</code>匹配除123这三个字符之外的任何东西。</p></blockquote><h2 id="正则匹配范围"><a href="#正则匹配范围" class="headerlink" title="正则匹配范围"></a>正则匹配范围</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#例如</span><br><span class="line">[0-9]</span><br><span class="line">[a-z]</span><br><span class="line">[1-3]</span><br><span class="line">[a-e]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将会匹配到1 Ton anvil 或 .5 ton anvil等 </span><br><span class="line">... where name regexp &#39;[1-5] Ton&#39;；</span><br></pre></td></tr></table></figure><h3 id="正则匹配特殊字符-转义"><a href="#正则匹配特殊字符-转义" class="headerlink" title="正则匹配特殊字符\\转义"></a>正则匹配特殊字符<code>\\</code>转义</h3><blockquote><p>如果需要转义<code>\</code>本身，需要使用<code>\\\</code><br>为什么正则表达式用两个<code>\\</code>呢？因为在mysql当中，mysql自己解释一个，正则表达式库解释一个。</p></blockquote><h3 id="正则匹配字符类"><a href="#正则匹配字符类" class="headerlink" title="正则匹配字符类"></a>正则匹配字符类</h3><p><img src="https://upload-images.jianshu.io/upload_images/8020666-8eab3ecb33a10981.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="正则匹配多个实例"><a href="#正则匹配多个实例" class="headerlink" title="正则匹配多个实例"></a>正则匹配多个实例</h3><p><img src="https://upload-images.jianshu.io/upload_images/8020666-603839c8146f03a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/8020666-c945d77f8c441799.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="正则定位符"><a href="#正则定位符" class="headerlink" title="正则定位符"></a>正则定位符</h3><p><img src="https://upload-images.jianshu.io/upload_images/8020666-c3a45ff2489ea9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>例如我们想搜索一个以<code>.</code>点号或者数字开头的结果，怎么办？<br>[0-9\.]是不行的，因为他会在文本的任意位置开始查找，解决办法就是使用定位符^从文本开始位置查找。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... where name regexp &#39;^[0-9\\.]&#39;;</span><br></pre></td></tr></table></figure><h2 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h2><blockquote><p>简单来说，数据库中存储的结果不是我们最终想要的，例如省市区分别存储在3列中，我们需要连在一列显示。</p></blockquote><h3 id="拼接字段Concat-函数"><a href="#拼接字段Concat-函数" class="headerlink" title="拼接字段Concat()函数"></a>拼接字段Concat()函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将first_name、 ( 、last_name、和）这四个字符串拼接起来，例如: 李 （小明）</span><br><span class="line">select Concat(first_name, &#39; (&#39; , last_name, &#39;)&#39;) as name from student;</span><br></pre></td></tr></table></figure><h3 id="Trim-、LTrim-、RTrim-函数"><a href="#Trim-、LTrim-、RTrim-函数" class="headerlink" title="Trim()、LTrim() 、RTrim()函数"></a><code>Trim()</code>、<code>LTrim()</code> 、<code>RTrim()</code>函数</h3><blockquote><p>分别为去掉左右两边的空格、去掉左边空格、去掉右边空格</p></blockquote><h2 id="如何测试计算？"><a href="#如何测试计算？" class="headerlink" title="如何测试计算？"></a>如何测试计算？</h2><p><img src="https://upload-images.jianshu.io/upload_images/8020666-a63f08be2c93c7b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#例如查询当前时间</span><br><span class="line">select  now();</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8020666-c844498b574fd8bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql命令行客户端登录&quot;&gt;&lt;a href=&quot;#mysql命令行客户端登录&quot; class=&quot;headerlink&quot; title=&quot;mysql命令行客户端登录&quot;&gt;&lt;/a&gt;mysql命令行客户端登录&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#默认端口3306 主机本地localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -u root -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#写全的话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -u root -p -h localhost -P 3307&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://www.yunqing.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>第二篇文章致敬梦想</title>
    <link href="http://www.yunqing.xyz/article/6b624713.html"/>
    <id>http://www.yunqing.xyz/article/6b624713.html</id>
    <published>2020-03-18T12:48:23.000Z</published>
    <updated>2020-03-22T11:06:10.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><del>毫无疑问，首篇文章祭给Hello World！</del></p><a id="more"></a><blockquote><p>超喜欢Nike这个视频，谨以此献给我的读者们，我们以此共勉，向着心中的“乌托邦”，未来的康庄大道，前进！</p><p>梦想还是要有的，万一实现了呢？</p><p>梦想是一定要有的，我们肯定能实现！</p><p>问题不是自己的梦想是否疯狂，而是够不够疯狂！</p></blockquote><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"https://yunqing-img.oss-cn-beijing.aliyuncs.com/video/dream-crazy.mp4","pic":"https://yunqing-img.oss-cn-beijing.aliyuncs.com/hexo/dream-img.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;毫无疑问，首篇文章祭给Hello World！&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="梦想" scheme="http://www.yunqing.xyz/tags/%E6%A2%A6%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.yunqing.xyz/article/4a17b156.html"/>
    <id>http://www.yunqing.xyz/article/4a17b156.html</id>
    <published>2020-03-17T13:41:23.000Z</published>
    <updated>2020-03-21T16:27:02.331Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a> </p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a> </p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Hello World" scheme="http://www.yunqing.xyz/tags/Hello-World/"/>
    
  </entry>
  
</feed>
